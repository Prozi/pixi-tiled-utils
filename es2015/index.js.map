{"version":3,"sources":["webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://pixi-tiled-utils/./node_modules/@babel/runtime/regenerator/index.js","webpack://pixi-tiled-utils/./lib/app.js","webpack://pixi-tiled-utils/./lib/extract.js","webpack://pixi-tiled-utils/./lib/tiled.js","webpack://pixi-tiled-utils/./lib/utils.js","webpack://pixi-tiled-utils/./lib/world.js","webpack://pixi-tiled-utils/./node_modules/regenerator-runtime/runtime.js","webpack://pixi-tiled-utils/./node_modules/tiled-utils/es2015/index.js","webpack://pixi-tiled-utils/webpack/bootstrap","webpack://pixi-tiled-utils/webpack/runtime/compat get default export","webpack://pixi-tiled-utils/webpack/runtime/define property getters","webpack://pixi-tiled-utils/webpack/runtime/hasOwnProperty shorthand","webpack://pixi-tiled-utils/webpack/runtime/make namespace object","webpack://pixi-tiled-utils/./lib/index.js"],"names":["PIXI","window","FullscreenApplication","everyTick","pixiApplicationOptions","bind","document","body","style","fontSize","margin","renderer","appendChild","view","addEventListener","requestResize","renderLoop","performance","now","time","requestAnimationFrame","resize","innerWidth","innerHeight","Application","TextureExtractor","tilewidth","tileheight","texture","offset","count","scaleMode","textureCache","SCALE_MODES","NEAREST","_prepareTextures","width","height","frame","cols","Math","floor","x","y","rect","Rectangle","Texture","baseTexture","cacheAsBitmap","prepareTexture","size","Array","fill","map","_","TiledUtils","require","tu","utils","getTexture","tiles","getFrame","console","warn","EMPTY","createSprite","sprite","isNaN","isFinite","Sprite","fromFrame","getModel","source","url","cursor","propList","split","length","shift","contains","array","value","some","string","startsWith","groupObjects","groupName","reduce","groups","item","push","nameObject","target","props","forEach","prop","pushObject","indexOf","isArray","objects","getBounds","up","Infinity","left","right","down","temp","w","h","World","config","jsonTiledMap","tileset","layersConfiguration","world","_createObjects","sprites","_createSprites","clear","ground","children","filter","type","Container","addChild","group","pickable","groupRegExp","RegExp","Object","keys","name","markedForRemove","log","next","find","regExp","match","container","object","gid","round","offsetx","offsety","bounds","basex","basey","child","anchor","set","err","error","message","stack","Tiled"],"mappings":";;;;;;;;;;;;;;AAAe;AACf;;AAEA,wCAAwC,SAAS;AACjD;AACA;;AAEA;AACA,C;;;;;;;;;;;;;;;;ACRqD;AACtC;AACf,iCAAiC,6DAAgB;AACjD,C;;;;;;;;;;;;;;;ACHe;AACf;AACA;AACA;;AAEA;AACA,C;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA,C;;;;;;;;;;;;;;;AClCe;AACf;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACJA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACde;AACf;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;ACLiD;AAClC;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,kBAAkB,2DAAc;AAChC,C;;;;;;;;;;;;;;;ACde;AACf;AACA,C;;;;;;;;;;;;;;;ACFe;AACf;AACA,C;;;;;;;;;;;;;;;;;ACFoD;AACW;AAChD;AACf,eAAe,sEAAO;AACtB;AACA;;AAEA,SAAS,kEAAqB;AAC9B,C;;;;;;;;;;;;;;;ACRe;AACf;AACA;AACA;AACA;;AAEA;AACA,C;;;;;;;;;;;;;;;;;;;ACPuD;AACJ;AACsB;AAClB;AACxC;AACf,SAAS,8DAAiB,SAAS,4DAAe,SAAS,uEAA0B,SAAS,8DAAiB;AAC/G,C;;;;;;;;;;;;;;;ACNe;AACf;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,C;;;;;;;;;;;;;;;;ACdqD;AACtC;AACf;AACA,oCAAoC,6DAAgB;AACpD;AACA;AACA;AACA,sFAAsF,6DAAgB;AACtG,C;;;;;;;;;;ACRA,gHAA+C;;;;;;;;;;;;;;;;;;;;;;ACAlC;;;;;;;;;;;;;AAEb,IAAMA,IAAI,GAAGC,MAAM,CAACD,IAApB;AAEA;AACA;AACA;;IACME,qB;;;;;AACJ;AACF;AACA;AACA;AACE,iCAAYC,SAAZ,EAAuBC,sBAAvB,EAA+C;AAAA;;AAAA;;AAC7C,8BAAMA,sBAAN;;AAEA,UAAKD,SAAL,GAAiB,CAACA,SAAS,IAAI,YAAY,CAAE,CAA5B,EAA8BE,IAA9B,CAAC,6FAAlB;;AAEAC,YAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,QAApB,GAA+B,CAA/B;AACAH,YAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,MAApB,GAA6B,CAA7B;AAEA,UAAKC,QAAL,IAAiBL,QAAQ,CAACC,IAAT,CAAcK,WAAd,CAA0B,MAAKD,QAAL,CAAcE,IAAxC,CAAjB;AAEAZ,UAAM,CAACa,gBAAP,CAAwB,QAAxB,EAAkC,MAAKC,aAAL,CAAmBV,IAAnB,8FAAlC;;AAEA,UAAKU,aAAL;;AACA,UAAKC,UAAL,CAAgBC,WAAW,CAACC,GAAZ,EAAhB;;AAb6C;AAc9C;AAED;AACF;AACA;AACA;;;;;WACE,oBAAWC,IAAX,EAAiB;AACfC,2BAAqB,CAAC,KAAKJ,UAAL,CAAgBX,IAAhB,CAAqB,IAArB,CAAD,CAArB;AACA,WAAKF,SAAL,CAAegB,IAAf;AACD;AAED;AACF;AACA;;;;WACE,yBAAgB;AACd,WAAKR,QAAL,IAAiB,KAAKA,QAAL,CAAcU,MAAd,CAAqBC,UAArB,EAAiCC,WAAjC,CAAjB;AACD;;;;EAnCiCvB,IAAI,CAACwB,W;;AAsCzC,iEAAetB,qBAAf,E;;;;;;;;;;;;;;;;;AC7Ca;;;;AAEb,IAAMF,IAAI,GAAGC,MAAM,CAACD,IAApB;AAEA;AACA;AACA;;IACMyB,gB;AACJ,kCAA0E;AAAA,QAA5DC,SAA4D,QAA5DA,SAA4D;AAAA,QAAjDC,UAAiD,QAAjDA,UAAiD;AAAA,QAArCC,OAAqC,QAArCA,OAAqC;AAAA,QAA5BC,MAA4B,QAA5BA,MAA4B;AAAA,QAApBC,KAAoB,QAApBA,KAAoB;AAAA,QAAbC,SAAa,QAAbA,SAAa;;AAAA;;AACxE,SAAKL,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKE,MAAL,GAAcA,MAAM,IAAI,CAAxB;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKI,YAAL,GAAoB,EAApB;AACA,SAAKD,SAAL,GAAiBA,SAAS,IAAI/B,IAAI,CAACiC,WAAL,CAAiBC,OAA/C;;AACA,SAAKC,gBAAL,CAAsBL,KAAtB;AACD;AAED;AACF;AACA;AACA;;;;;SACE,eAAY;AACV,aAAO,KAAKF,OAAL,CAAaQ,KAApB;AACD;AAED;AACF;AACA;AACA;;;;SACE,eAAa;AACX,aAAO,KAAKR,OAAL,CAAaS,MAApB;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,wBAAeC,KAAf,EAAsB;AACpB,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKL,KAAL,GAAa,KAAKV,SAA7B,CAAb;AACA,UAAMgB,CAAC,GAAI,CAACJ,KAAK,GAAG,KAAKT,MAAd,IAAwBU,IAAzB,GAAiC,KAAKb,SAAhD;AACA,UAAMiB,CAAC,GAAGH,IAAI,CAACC,KAAL,CAAW,CAACH,KAAK,GAAG,KAAKT,MAAd,IAAwBU,IAAnC,IAA2C,KAAKZ,UAA1D;AACA,UAAMiB,IAAI,GAAG,IAAI5C,IAAI,CAAC6C,SAAT,CAAmBH,CAAnB,EAAsBC,CAAtB,EAAyB,KAAKjB,SAA9B,EAAyC,KAAKC,UAA9C,CAAb;AACA,UAAMC,OAAO,GAAG,IAAI5B,IAAI,CAAC8C,OAAT,CAAiB,KAAKlB,OAAtB,EAA+BgB,IAA/B,CAAhB;AAEAhB,aAAO,CAACmB,WAAR,CAAoBhB,SAApB,GAAgC,KAAKA,SAArC;AACAH,aAAO,CAACoB,aAAR,GAAwB,IAAxB;AAEA,aAAOpB,OAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,kBAASU,KAAT,EAAgB;AACd,UAAI,CAAC,KAAKN,YAAL,CAAkBM,KAAlB,CAAL,EAA+B;AAC7B,aAAKW,cAAL,CAAoBX,KAApB;AACD;;AAED,aAAO,KAAKN,YAAL,CAAkBM,KAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;;;;WACE,0BAAiBR,KAAjB,EAAwB;AAAA;;AACtB,UAAMoB,IAAI,GACRpB,KAAK,IAAK,KAAKM,KAAL,GAAa,KAAKV,SAAnB,IAAiC,KAAKW,MAAL,GAAc,KAAKV,UAApD,CADX;AAGA,WAAKK,YAAL,GAAoB,IAAImB,KAAJ,CAAUD,IAAV,EACjBE,IADiB,CACZ,CADY,EAEjBC,GAFiB,CAEb,UAACC,CAAD,EAAIhB,KAAJ;AAAA,eAAc,KAAI,CAACW,cAAL,CAAoBX,KAApB,CAAd;AAAA,OAFa,CAApB;AAGD;;;;;;AAGH,iEAAeb,gBAAf,E;;;;;;;;;;;;;;;AC/Ea;;AAEb,IAAMzB,IAAI,GAAGC,MAAM,CAACD,IAApB;;AACA,IAAMuD,UAAU,GAAGC,mBAAO,CAAC,+DAAD,CAA1B;;AACA,IAAMC,EAAE,GAAG,IAAIF,UAAJ,CAAevD,IAAf,CAAX;AAEA,iEAAeyD,EAAf,E;;;;;;;;;;;;;;;ACNa;;AAEb,IAAMzD,IAAI,GAAGC,MAAM,CAACD,IAApB;AAEA;AACA;AACA;;AACA,IAAM0D,KAAK,GAAG;AACZ;AACF;AACA;AACA;AACA;AACA;AACEC,YAPY,sBAODrB,KAPC,EAOMsB,KAPN,EAOa;AACvB,QAAIA,KAAK,IAAI,OAAOA,KAAK,CAACC,QAAb,KAA0B,UAAvC,EAAmD;AACjD,aAAOD,KAAK,CAACC,QAAN,CAAevB,KAAf,CAAP;AACD,KAFD,MAEO;AACLwB,aAAO,CAACC,IAAR,CAAa,8BAAb;AACD;;AACD,WAAO/D,IAAI,CAAC8C,OAAL,CAAakB,KAApB;AACD,GAdW;;AAgBZ;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,cAvBY,wBAuBC3B,KAvBD,QAuBiD;AAAA,QAAvCZ,SAAuC,QAAvCA,SAAuC;AAAA,QAA5BC,UAA4B,QAA5BA,UAA4B;AAAA,QAAdiC,KAAc,uEAAN,IAAM;AAC3D,QAAIM,MAAJ;;AAEA,QAAIN,KAAJ,EAAW;AACT,UAAI,CAACO,KAAK,CAAC7B,KAAD,CAAN,IAAiB8B,QAAQ,CAAC9B,KAAD,CAA7B,EAAsC;AACpC4B,cAAM,GAAG,IAAIlE,IAAI,CAACqE,MAAT,CAAgBX,KAAK,CAACC,UAAN,CAAiB,CAAC,CAACrB,KAAnB,EAA0BsB,KAA1B,CAAhB,CAAT;AACD,OAFD,MAEO,IAAItB,KAAJ,EAAW;AAChB4B,cAAM,GAAGlE,IAAI,CAACqE,MAAL,CAAYC,SAAZ,CAAsBhC,KAAtB,CAAT;AACD;AACF,KAND,MAMO;AACL4B,YAAM,GAAG,IAAIlE,IAAI,CAACqE,MAAT,EAAT;AACD;;AAED,QAAIH,MAAJ,EAAY;AACVA,YAAM,CAAC9B,KAAP,GAAeV,SAAf;AACAwC,YAAM,CAAC7B,MAAP,GAAgBV,UAAhB;;AAEA,UAAIuC,MAAM,CAACtC,OAAX,EAAoB;AAClBsC,cAAM,CAACtC,OAAP,CAAemB,WAAf,CAA2BhB,SAA3B,GAAuC/B,IAAI,CAACiC,WAAL,CAAiBC,OAAxD;AACD;AACF;;AAED,WAAOgC,MAAP;AACD,GA9CW;;AAgDZ;AACF;AACA;AACA;AACA;AACA;AACEK,UAtDY,oBAsDHC,MAtDG,EAsDKC,GAtDL,EAsDU;AACpB,QAAIC,MAAM,GAAGF,MAAb;AACA,QAAMG,QAAQ,GAAGF,GAAG,CAACG,KAAJ,CAAU,GAAV,CAAjB;;AACA,WAAOF,MAAM,IAAIC,QAAQ,CAACE,MAA1B,EAAkC;AAChCH,YAAM,GAAGA,MAAM,CAACC,QAAQ,CAACG,KAAT,EAAD,CAAf;AACD;;AACD,WAAOJ,MAAP;AACD,GA7DW;;AA+DZ;AACF;AACA;AACA;AACA;AACA;AACEK,UArEY,oBAqEHC,KArEG,EAqEIC,KArEJ,EAqEW;AACrB,WAAOA,KAAK,IAAID,KAAK,CAACE,IAAN,CAAW,UAACC,MAAD;AAAA,aAAYF,KAAK,CAACG,UAAN,CAAiBD,MAAjB,CAAZ;AAAA,KAAX,CAAhB;AACD,GAvEW;;AAyEZ;AACF;AACA;AACA;AACA;AACA;AACEE,cA/EY,wBA+ECL,KA/ED,EA+EkC;AAAA,QAA1BM,SAA0B,uEAAd,YAAc;AAC5C,WAAON,KAAK,GACRA,KAAK,CAACO,MAAN,CAAa,UAACC,MAAD,EAASC,IAAT,EAAkB;AAC7B,UAAMf,MAAM,GAAGhB,KAAK,CAACa,QAAN,CAAekB,IAAf,EAAqBH,SAArB,CAAf;;AACA,UAAIZ,MAAJ,EAAY;AACV,YAAI,CAACc,MAAM,CAACd,MAAD,CAAX,EAAqB;AACnBc,gBAAM,CAACd,MAAD,CAAN,GAAiB,EAAjB;AACD;;AACDc,cAAM,CAACd,MAAD,CAAN,CAAegB,IAAf,CAAoBD,IAApB;AACD;;AACD,aAAOD,MAAP;AACD,KATD,EASG,EATH,CADQ,GAWR,EAXJ;AAYD,GA5FW;;AA8FZ;AACF;AACA;AACA;AACA;AACA;AACA;AACEG,YArGY,sBAqGDC,MArGC,EAqG8C;AAAA,QAAvCpB,MAAuC,uEAA9B,EAA8B;AAAA,QAA1BqB,KAA0B,uEAAlB,CAAC,MAAD,EAAS,MAAT,CAAkB;AACxD,QAAI,CAACD,MAAL,EAAa;AAEbC,SAAK,CAACC,OAAN,CAAc,UAACC,IAAD,EAAU;AACtB,UAAIvB,MAAM,CAACuB,IAAD,CAAN,IAAgB,CAACH,MAAM,CAACG,IAAD,CAA3B,EAAmC;AACjCH,cAAM,CAACG,IAAD,CAAN,GAAevB,MAAM,CAACuB,IAAD,CAArB;AACD;AACF,KAJD;AAKD,GA7GW;;AA+GZ;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,YAtHY,sBAsHDxB,MAtHC,EAsHOoB,MAtHP,EAsHeC,KAtHf,EAsHsB;AAChC,QAAID,MAAM,CAACK,OAAP,CAAezB,MAAf,MAA2B,CAAC,CAAhC,EAAmC;;AACnC,QAAIrB,KAAK,CAAC+C,OAAN,CAAc1B,MAAM,CAAC2B,OAArB,CAAJ,EAAmC;AACjC3B,YAAM,CAAC2B,OAAP,CAAeL,OAAf,CAAuB,UAAC5B,MAAD,EAAY;AACjCR,aAAK,CAACiC,UAAN,CAAiBzB,MAAjB,EAAyBM,MAAzB,EAAiCqB,KAAjC;AACD,OAFD;AAGD;;AACDD,UAAM,CAACF,IAAP,CAAYlB,MAAZ;AACD,GA9HW;;AAgIZ;AACF;AACA;AACA;AACA;AACE4B,WArIY,qBAqIFpB,KArIE,EAqIK;AACf,QAAI7B,KAAK,CAAC+C,OAAN,CAAclB,KAAd,KAAwBA,KAAK,CAACH,MAAlC,EAA0C;AACxC,UAAIwB,EAAE,GAAGC,QAAT;AACA,UAAIC,IAAI,GAAGD,QAAX;AACA,UAAIE,KAAK,GAAG,CAACF,QAAb;AACA,UAAIG,IAAI,GAAG,CAACH,QAAZ;AACA,UAAII,IAAJ;AACA1B,WAAK,CAACc,OAAN,CAAc,UAAC5B,MAAD,EAAY;AACxB,YAAMyC,CAAC,GAAGzC,MAAM,CAAC9B,KAAjB;AACA,YAAMwE,CAAC,GAAG1C,MAAM,CAAC7B,MAAjB;;AACA,YAAI,CAACqE,IAAI,GAAGxC,MAAM,CAACxB,CAAf,IAAoB6D,IAAxB,EAA8B;AAC5BA,cAAI,GAAGG,IAAP;AACD;;AACD,YAAI,CAACA,IAAI,GAAGxC,MAAM,CAACvB,CAAf,IAAoB0D,EAAxB,EAA4B;AAC1BA,YAAE,GAAGK,IAAL;AACD;;AACD,YAAI,CAACA,IAAI,GAAGxC,MAAM,CAACxB,CAAP,GAAWiE,CAAnB,IAAwBH,KAA5B,EAAmC;AACjCA,eAAK,GAAGE,IAAR;AACD;;AACD,YAAI,CAACA,IAAI,GAAGxC,MAAM,CAACvB,CAAP,GAAWiE,CAAnB,IAAwBH,IAA5B,EAAkC;AAChCA,cAAI,GAAGC,IAAP;AACD;AACF,OAfD;AAgBA,aAAO;AAAEL,UAAE,EAAFA,EAAF;AAAMI,YAAI,EAAJA,IAAN;AAAYF,YAAI,EAAJA,IAAZ;AAAkBC,aAAK,EAALA;AAAlB,OAAP;AACD;;AACD,WAAO;AAAEH,QAAE,EAAE,CAAN;AAASI,UAAI,EAAE,CAAf;AAAkBF,UAAI,EAAE,CAAxB;AAA2BC,WAAK,EAAE;AAAlC,KAAP;AACD;AA/JW,CAAd;AAkKA,iEAAe9C,KAAf,E;;;;;;;;;;;;;;;;;;;;;;;;ACzKa;;;;;;;AAEb,IAAM1D,IAAI,GAAGC,MAAM,CAACD,IAApB;AAEA;AACA;AACA;AAEA;AACA;AACA;;IACM6G,K;AACJ;AACF;AACA;AACA;AACE,iBAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAIA,MAAJ,EAAY;AACV,WAAKlD,KAAL,GAAa,IAAInC,6CAAJ,CAAqBqF,MAArB,CAAb;AACD,KAFD,MAEO;AACLhD,aAAO,CAACC,IAAR,CAAa,0BAAb;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;;0LACE,iBAAagD,YAAb,EAA2BC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoCC,mCAApC,2DAA0D,EAA1D;AACE,qBAAKC,KAAL,GAAazD,0DAAA,CAAkBsD,YAAlB,EAAgCC,OAAhC,CAAb;AACA,qBAAKb,OAAL,GAAe,KAAKgB,cAAL,CAAoBF,mBAApB,CAAf;AACA,qBAAKG,OAAL,GAAe,KAAKC,cAAL,CAAoBJ,mBAAmB,CAACK,KAAxC,CAAf;AACA,qBAAKC,MAAL,GAAc,KAAKL,KAAL,CAAWM,QAAX,CAAoBC,MAApB,CACZ;AAAA,sBAAGC,IAAH,QAAGA,IAAH;AAAA,yBAAcA,IAAI,KAAK,WAAvB;AAAA,iBADY,CAAd;AAIMR,qBARR,GAQgB,IAAIlH,IAAI,CAAC2H,SAAT,EARhB;AAUE,qBAAKJ,MAAL,CAAY1C,MAAZ,IAAsBqC,KAAK,CAACU,QAAN,OAAAV,KAAK,oFAAa,KAAKK,MAAlB,EAA3B;AACA,qBAAKH,OAAL,CAAavC,MAAb,IAAuBqC,KAAK,CAACU,QAAN,OAAAV,KAAK,oFAAa,KAAKE,OAAlB,EAA5B;AAXF,iDAaSF,KAbT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAgBA;AACF;AACA;AACA;AACA;;;;WACE,+BAA0D;AAAA;;AAAA,8BAAzCW,KAAyC;AAAA,UAAzCA,KAAyC,4BAAjC,EAAiC;AAAA,8BAA7BP,KAA6B;AAAA,UAA7BA,KAA6B,4BAArB,EAAqB;AAAA,iCAAjBQ,QAAiB;AAAA,UAAjBA,QAAiB,+BAAN,EAAM;AACxD,UAAM3B,OAAO,GAAG,EAAhB;AACA,UAAMX,MAAM,GAAG9B,wDAAA,CAAmB,KAAKwD,KAAL,CAAWf,OAA9B,CAAf;AACA,UAAM4B,WAAW,GAAGF,KAAK,CAACxE,GAAN,CAAU,UAAC8B,MAAD;AAAA,eAAY,IAAI6C,MAAJ,CAAW7C,MAAX,CAAZ;AAAA,OAAV,CAApB;AACA8C,YAAM,CAACC,IAAP,CAAY1C,MAAZ,EACGiC,MADH,CACU,UAACU,IAAD,EAAU;AAChB,YAAMC,eAAe,GAAG1E,oDAAA,CAAe4D,KAAf,EAAsBa,IAAtB,CAAxB;AACA,eAAO,CAACC,eAAD,IAAoB,CAAC1E,oDAAA,CAAeoE,QAAf,EAAyBK,IAAzB,CAA5B;AACD,OAJH,EAKGrC,OALH,CAKW,UAACqC,IAAD,EAAU;AACjBrE,eAAO,CAACuE,GAAR,sCAAgCF,IAAhC;AACA,YAAMG,IAAI,GAAG9C,MAAM,CAAC2C,IAAD,CAAnB;AACA,YAAMN,KAAK,GAAGE,WAAW,CAACQ,IAAZ,CAAiB,UAACC,MAAD;AAAA,iBAAYL,IAAI,CAACM,KAAL,CAAWD,MAAX,CAAZ;AAAA,SAAjB,CAAd;AACA,YAAIE,SAAJ;;AACA,YAAIb,KAAJ,EAAW;AACTa,mBAAS,GAAG,IAAI1I,IAAI,CAAC2H,SAAT,EAAZ;AACAjE,gEAAA,CAAiBgF,SAAjB,EAA4BvC,OAA5B;AACAzC,gEAAA,CAAiBgF,SAAjB,EAA4B;AAAEP,gBAAI,EAAJA,IAAF;AAAQT,gBAAI,EAAE;AAAd,WAA5B;AACA5D,iBAAO,CAACuE,GAAR,mCAA6BF,IAA7B;AACD;;AACD,YAAIhF,KAAK,CAAC+C,OAAN,CAAcoC,IAAd,CAAJ,EAAyB;AACvBA,cAAI,CAACxC,OAAL,CAAa,UAAC6C,MAAD,EAAY;AACvB,gBAAIA,MAAM,CAACC,GAAX,EAAgB;AACd,kBAAM1E,MAAM,GAAGR,wDAAA,CACbiF,MAAM,CAACC,GADM,EAEb,KAAI,CAAC1B,KAFQ,EAGb,KAAI,CAACtD,KAHQ,CAAf;;AAKA,kBAAIM,MAAJ,EAAY;AACVR,sEAAA,CAAiBQ,MAAjB,EAAyByE,MAAzB,EAAiC,CAAC,GAAD,EAAM,GAAN,EAAW,KAAX,EAAkB,MAAlB,CAAjC;;AACA,oBAAId,KAAJ,EAAW;AACT/D,yBAAO,CAACuE,GAAR,mCAEIM,MAAM,CAACR,IAFX,eAGO,CAAC,CAACjE,MAAM,CAACxB,CAHhB,cAGqB,CAAC,CAACwB,MAAM,CAACvB,CAH9B,yBAG8CwF,IAH9C;AAKAO,2BAAS,CAACd,QAAV,CAAmB1D,MAAnB;AACD,iBAPD,MAOO;AACLR,wEAAA,CAAiBQ,MAAjB,EAAyBiC,OAAzB;AACD;AACF;AACF;AACF,WArBD;AAsBD;AACF,OAxCH;AAyCA,aAAOA,OAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,0BAA2B;AAAA;;AAAA,UAAZmB,KAAY,uEAAJ,EAAI;AACzB,aAAO,KAAKnB,OAAL,CACJsB,MADI,CACG,UAACvD,MAAD;AAAA,eAAY,CAACR,oDAAA,CAAe4D,KAAf,EAAsBpD,MAAM,CAACiE,IAA7B,CAAb;AAAA,OADH,EAEJ9E,GAFI,CAEA,UAACa,MAAD,EAAY;AACf,YAAI;AACF,cAAMxB,CAAC,GAAGF,IAAI,CAACqG,KAAL,CAAW,CAAC3E,MAAM,CAACxB,CAAP,IAAY,CAAb,KAAmBwB,MAAM,CAAC4E,OAAP,IAAkB,CAArC,CAAX,CAAV;AACA,cAAMnG,CAAC,GAAGH,IAAI,CAACqG,KAAL,CAAW,CAAC3E,MAAM,CAACvB,CAAP,IAAY,CAAb,KAAmBuB,MAAM,CAAC6E,OAAP,IAAkB,CAArC,CAAX,CAAV;AACA,cAAM5C,OAAO,GAAGjC,MAAM,CAACsD,QAAP,CAAgB3C,MAAhB,GAAyBX,MAAM,CAACsD,QAAhC,GAA2C,CAACtD,MAAD,CAA3D;AACA,cAAM8E,MAAM,GAAGtF,qDAAA,CAAgByC,OAAhB,CAAf;AACAjC,gBAAM,CAACxB,CAAP,GAAWwB,MAAM,CAAC+E,KAAP,GAAeD,MAAM,CAACzC,IAAP,GAAc7D,CAAxC;AACAwB,gBAAM,CAACvB,CAAP,GAAWuB,MAAM,CAACgF,KAAP,GAAeF,MAAM,CAACvC,IAAP,GAAc9D,CAAd,GAAkB,MAAI,CAACuE,KAAL,CAAWvF,UAAvD;AACAwE,iBAAO,CAACL,OAAR,CAAgB,UAACqD,KAAD,EAAW;AACzBA,iBAAK,CAACzG,CAAN,IAAWsG,MAAM,CAACzC,IAAP,GAAc4C,KAAK,CAAC/G,KAAN,GAAc,GAAvC;AACA+G,iBAAK,CAACxG,CAAN,IAAWqG,MAAM,CAACvC,IAAP,GAAc,MAAI,CAACS,KAAL,CAAWvF,UAApC;AACAwH,iBAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,GAAjB,EAAsB,CAAtB;AACD,WAJD;AAKA,iBAAOnF,MAAP;AACD,SAbD,CAaE,OAAOoF,GAAP,EAAY;AACZxF,iBAAO,CAACyF,KAAR,CAAcD,GAAG,CAACE,OAAlB,EAA2BF,GAAG,CAACG,KAA/B;AACD;AACF,OAnBI,CAAP;AAoBD;;;;;;AAGH,iEAAe5C,KAAf,E;;;;;;;;;;ACjIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa;AACb,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,KAAK;AACL,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;;AAEA;AACA;AACA,wCAAwC,WAAW;AACnD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,cAAc;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,kBAAkB;AACnD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8CAA8C,QAAQ;AACtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA,WAAW;AACX;AACA;AACA;;AAEA,WAAW;AACX;AACA;AACA;;AAEA,WAAW;AACX;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,KAAK;;AAEL;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA,EAAE,KAA0B,oBAAoB,CAAE;AAClD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3uBY;AACZ;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;AAGA;AACA,oBAAoB;;AAEpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;;AAGL;;AAEA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;;AAEA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;;;AAGb;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT,OAAO;;;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA,sEAAsE,WAAW;AACjF,OAAO;;;AAGP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;;AAGL;;AAEA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,0BAA0B;;AAE1B;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;;;AAGb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT,OAAO;;;AAGP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT,OAAO;;;AAGP;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA,sEAAsE,WAAW;AACjF,OAAO;;;AAGP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;;;AAGA;AACA;AACA,OAAO;AACP;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA,KAAK;AACL;AACA;;;AAGA;AACA;AACA;AACA;;AAEA,qBAAqB,iCAAiC;AACtD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;;AAGT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET,OAAO;;;AAGP;AACA;AACA;;AAEA;AACA;AACA,OAAO;;;AAGP;;AAEA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,qBAAqB;AAC1C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;;AAGP;AACA,KAAK;AACL;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA,C;;;;;;UC3jDA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,gCAAgC,YAAY;WAC5C;WACA,E;;;;;WCPA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;;;;;;;;;ACNa;;AAEb;AACA;AACA;AACA;AAEA;AAEA;;AACA5G,MAAM,CAACD,IAAP,CAAY0J,KAAZ,GAAoB;AAAExJ,uBAAqB,EAArBA,yCAAF;AAAyB2G,OAAK,EAALA,2CAAzB;AAAgCpF,kBAAgB,EAAhBA,6CAAhC;AAAkDiC,OAAK,EAALA,2CAAKA;AAAvD,CAApB,C","file":"index.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import _typeof from \"@babel/runtime/helpers/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","module.exports = require(\"regenerator-runtime\");\n","\"use strict\";\n\nconst PIXI = window.PIXI;\n\n/**\n * class FullscreenApplication\n */\nclass FullscreenApplication extends PIXI.Application {\n  /**\n   * @param {function} [everyTick]\n   * @param {PIXI.ApplicationOptions} [pixiApplicationOptions]\n   */\n  constructor(everyTick, pixiApplicationOptions) {\n    super(pixiApplicationOptions);\n\n    this.everyTick = (everyTick || function () {}).bind(this);\n\n    document.body.style.fontSize = 0;\n    document.body.style.margin = 0;\n\n    this.renderer && document.body.appendChild(this.renderer.view);\n\n    window.addEventListener(\"resize\", this.requestResize.bind(this));\n\n    this.requestResize();\n    this.renderLoop(performance.now());\n  }\n\n  /**\n   * main loop gets initialized at constructor, runs everyTick function\n   * @param {number} time\n   */\n  renderLoop(time) {\n    requestAnimationFrame(this.renderLoop.bind(this));\n    this.everyTick(time);\n  }\n\n  /**\n   * resizes to window\n   */\n  requestResize() {\n    this.renderer && this.renderer.resize(innerWidth, innerHeight);\n  }\n}\n\nexport default FullscreenApplication;\n","\"use strict\";\n\nconst PIXI = window.PIXI;\n\n/**\n * class TextureExtractor\n */\nclass TextureExtractor {\n  constructor({ tilewidth, tileheight, texture, offset, count, scaleMode }) {\n    this.tilewidth = tilewidth;\n    this.tileheight = tileheight;\n    this.offset = offset || 0;\n    this.texture = texture;\n    this.textureCache = [];\n    this.scaleMode = scaleMode || PIXI.SCALE_MODES.NEAREST;\n    this._prepareTextures(count);\n  }\n\n  /**\n   * get inner texture width\n   * @returns number\n   */\n  get width() {\n    return this.texture.width;\n  }\n\n  /**\n   * get inner texture height\n   * @returns number\n   */\n  get height() {\n    return this.texture.height;\n  }\n\n  /**\n   * prepares n-th frame (zero indexed)\n   * @param {number} frame\n   * @returns PIXI.Texture\n   */\n  prepareTexture(frame) {\n    const cols = Math.floor(this.width / this.tilewidth);\n    const x = ((frame - this.offset) % cols) * this.tilewidth;\n    const y = Math.floor((frame - this.offset) / cols) * this.tileheight;\n    const rect = new PIXI.Rectangle(x, y, this.tilewidth, this.tileheight);\n    const texture = new PIXI.Texture(this.texture, rect);\n\n    texture.baseTexture.scaleMode = this.scaleMode;\n    texture.cacheAsBitmap = true;\n\n    return texture;\n  }\n\n  /**\n   * gets n-th frame (zero indexed)\n   * @param {number} frame\n   * @returns PIXI.Texture\n   */\n  getFrame(frame) {\n    if (!this.textureCache[frame]) {\n      this.prepareTexture(frame);\n    }\n\n    return this.textureCache[frame];\n  }\n\n  /**\n   * private prepares cache up to count, used in constructor\n   * @param {number} count\n   */\n  _prepareTextures(count) {\n    const size =\n      count || (this.width / this.tilewidth) * (this.height / this.tileheight);\n\n    this.textureCache = new Array(size)\n      .fill(0)\n      .map((_, frame) => this.prepareTexture(frame));\n  }\n}\n\nexport default TextureExtractor;\n","\"use strict\";\n\nconst PIXI = window.PIXI;\nconst TiledUtils = require(\"tiled-utils\");\nconst tu = new TiledUtils(PIXI);\n\nexport default tu;\n","\"use strict\";\n\nconst PIXI = window.PIXI;\n\n/**\n * inner utils, maybe useful for you too\n */\nconst utils = {\n  /**\n   * get texture from tiles\n   * @param {number} frame\n   * @param {inner} tiles\n   * @returns PIXI.Texture\n   */\n  getTexture(frame, tiles) {\n    if (tiles && typeof tiles.getFrame === \"function\") {\n      return tiles.getFrame(frame);\n    } else {\n      console.warn(\"! tiles not set @ getTexture\");\n    }\n    return PIXI.Texture.EMPTY;\n  },\n\n  /**\n   * create sprite from frame, tileSizeConfig and tiles\n   * @param {number} frame\n   * @param {{ tilewidth, tileheight }} tileSizeConfig\n   * @param {inner} tiles\n   * @returns PIXI.Sprite | undefined\n   */\n  createSprite(frame, { tilewidth, tileheight }, tiles = null) {\n    let sprite;\n\n    if (tiles) {\n      if (!isNaN(frame) && isFinite(frame)) {\n        sprite = new PIXI.Sprite(utils.getTexture(~~frame, tiles));\n      } else if (frame) {\n        sprite = PIXI.Sprite.fromFrame(frame);\n      }\n    } else {\n      sprite = new PIXI.Sprite();\n    }\n\n    if (sprite) {\n      sprite.width = tilewidth;\n      sprite.height = tileheight;\n\n      if (sprite.texture) {\n        sprite.texture.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;\n      }\n    }\n\n    return sprite;\n  },\n\n  /**\n   * works like lodash.get\n   * @param {any} source\n   * @param {string} url\n   * @returns any\n   */\n  getModel(source, url) {\n    let cursor = source;\n    const propList = url.split(\".\");\n    while (cursor && propList.length) {\n      cursor = cursor[propList.shift()];\n    }\n    return cursor;\n  },\n\n  /**\n   * checks does array contain keys starting with value\n   * @param {any[]} array\n   * @param {any} value\n   * @returns boolean\n   */\n  contains(array, value) {\n    return value && array.some((string) => value.startsWith(string));\n  },\n\n  /**\n   * groups objects array into object\n   * @param {any[]} array\n   * @param {string} groupName\n   * @returns object\n   */\n  groupObjects(array, groupName = \"group.name\") {\n    return array\n      ? array.reduce((groups, item) => {\n          const cursor = utils.getModel(item, groupName);\n          if (cursor) {\n            if (!groups[cursor]) {\n              groups[cursor] = [];\n            }\n            groups[cursor].push(item);\n          }\n          return groups;\n        }, {})\n      : {};\n  },\n\n  /**\n   * copies props like name, type from  another object\n   * @param {object} target\n   * @param {object} source\n   * @param {string[]} props\n   * @returns void\n   */\n  nameObject(target, source = {}, props = [\"name\", \"type\"]) {\n    if (!target) return;\n\n    props.forEach((prop) => {\n      if (source[prop] && !target[prop]) {\n        target[prop] = source[prop];\n      }\n    });\n  },\n\n  /**\n   * adds object to array, also names it\n   * @param {any} source\n   * @param {any[]} target\n   * @param {string[]} props\n   * @returns void\n   */\n  pushObject(source, target, props) {\n    if (target.indexOf(source) !== -1) return;\n    if (Array.isArray(source.objects)) {\n      source.objects.forEach((sprite) => {\n        utils.nameObject(sprite, source, props);\n      });\n    }\n    target.push(source);\n  },\n\n  /**\n   * gets bounds of object, fast\n   * @param {any[]} array\n   * @returns object\n   */\n  getBounds(array) {\n    if (Array.isArray(array) && array.length) {\n      let up = Infinity;\n      let left = Infinity;\n      let right = -Infinity;\n      let down = -Infinity;\n      let temp;\n      array.forEach((sprite) => {\n        const w = sprite.width;\n        const h = sprite.height;\n        if ((temp = sprite.x) < left) {\n          left = temp;\n        }\n        if ((temp = sprite.y) < up) {\n          up = temp;\n        }\n        if ((temp = sprite.x + w) > right) {\n          right = temp;\n        }\n        if ((temp = sprite.y + h) > down) {\n          down = temp;\n        }\n      });\n      return { up, down, left, right };\n    }\n    return { up: 0, down: 0, left: 0, right: 0 };\n  },\n};\n\nexport default utils;\n","\"use strict\";\n\nconst PIXI = window.PIXI;\n\nimport TextureExtractor from \"./extract\";\nimport tu from \"./tiled\";\nimport utils from \"./utils\";\n\n/**\n * class World\n */\nclass World {\n  /**\n   * step 1 - extract tiles\n   * @param {object} config\n   */\n  constructor(config) {\n    if (config) {\n      this.tiles = new TextureExtractor(config);\n    } else {\n      console.warn(\"Creating tile-less world\");\n    }\n  }\n\n  /**\n   * step 2 - create world\n   * @param {object | string} jsonTiledMap\n   * @param {PIXI.Sprite} tileset\n   * @param {object} [layersConfiguration]\n   * @returns World\n   */\n  async create(jsonTiledMap, tileset, layersConfiguration = {}) {\n    this.world = tu.makeTiledWorld(jsonTiledMap, tileset);\n    this.objects = this._createObjects(layersConfiguration);\n    this.sprites = this._createSprites(layersConfiguration.clear);\n    this.ground = this.world.children.filter(\n      ({ type }) => type === \"tilelayer\"\n    );\n\n    const world = new PIXI.Container();\n\n    this.ground.length && world.addChild(...this.ground);\n    this.sprites.length && world.addChild(...this.sprites);\n\n    return world;\n  }\n\n  /**\n   * private createObjects from config: { group = [], clear = [], pickable = [] }\n   * @param {object} options\n   * @returns object[]\n   */\n  _createObjects({ group = [], clear = [], pickable = [] }) {\n    const objects = [];\n    const groups = utils.groupObjects(this.world.objects);\n    const groupRegExp = group.map((string) => new RegExp(string));\n    Object.keys(groups)\n      .filter((name) => {\n        const markedForRemove = utils.contains(clear, name);\n        return !markedForRemove && !utils.contains(pickable, name);\n      })\n      .forEach((name) => {\n        console.log(`┣━ parse object: ${name}`);\n        const next = groups[name];\n        const group = groupRegExp.find((regExp) => name.match(regExp));\n        let container;\n        if (group) {\n          container = new PIXI.Container();\n          utils.pushObject(container, objects);\n          utils.nameObject(container, { name, type: \"layer\" });\n          console.log(`┣━ add layer: ${name}`);\n        }\n        if (Array.isArray(next)) {\n          next.forEach((object) => {\n            if (object.gid) {\n              const sprite = utils.createSprite(\n                object.gid,\n                this.world,\n                this.tiles\n              );\n              if (sprite) {\n                utils.nameObject(sprite, object, [\"x\", \"y\", \"gid\", \"name\"]);\n                if (group) {\n                  console.log(\n                    `┣━ add object ${\n                      object.name\n                    } (${~~sprite.x}/${~~sprite.y}) to layer: ${name}`\n                  );\n                  container.addChild(sprite);\n                } else {\n                  utils.pushObject(sprite, objects);\n                }\n              }\n            }\n          });\n        }\n      });\n    return objects;\n  }\n\n  /**\n   * private createSprites with string[] layers exceptions\n   * @param {string[]} [clear]\n   * @returns object[]\n   */\n  _createSprites(clear = []) {\n    return this.objects\n      .filter((sprite) => !utils.contains(clear, sprite.name))\n      .map((sprite) => {\n        try {\n          const x = Math.round((sprite.x || 0) + (sprite.offsetx || 0));\n          const y = Math.round((sprite.y || 0) + (sprite.offsety || 0));\n          const objects = sprite.children.length ? sprite.children : [sprite];\n          const bounds = utils.getBounds(objects);\n          sprite.x = sprite.basex = bounds.left + x;\n          sprite.y = sprite.basey = bounds.down + y - this.world.tileheight;\n          objects.forEach((child) => {\n            child.x -= bounds.left - child.width * 0.5;\n            child.y -= bounds.down - this.world.tileheight;\n            child.anchor.set(0.5, 1);\n          });\n          return sprite;\n        } catch (err) {\n          console.error(err.message, err.stack);\n        }\n      });\n  }\n}\n\nexport default World;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","'use strict'\n/* global PIXI */\n\nmodule.exports = module.exports.default = class TileUtilities {\n  constructor(renderingEngine = PIXI) {\n    if (renderingEngine === undefined) throw new Error('Please assign a rendering engine in the constructor before using bump.js') // Find out which rendering engine is being used (the default is Pixi)\n\n    this.renderer = '' // If the `renderingEngine` is Pixi, set up Pixi object aliases\n\n    if (renderingEngine.Container && renderingEngine.Sprite) {\n      this.renderingEngine = renderingEngine\n      this.renderer = 'pixi'\n      this.Container = this.renderingEngine.Container\n      this.TextureCache = this.renderingEngine.utils.TextureCache\n      this.Texture = this.renderingEngine.Texture\n      this.Sprite = this.renderingEngine.Sprite\n      this.Rectangle = this.renderingEngine.Rectangle\n      this.Graphics = this.renderingEngine.Graphics\n      this.loader = this.renderingEngine.loader\n      this.resources = this.renderingEngine.resources\n    }\n  } // Make a texture from a frame in another texture or image\n\n\n  frame(source, x, y, width, height) {\n    // for backend use (with pixi-shim)\n    // return without frame retangle\n    if (!source) {\n      return this.Texture.EMPTY\n    }\n\n    let texture // If the source is a string, it's either a texture in the\n    // cache or an image file\n\n    if (typeof source === 'string') {\n      if (this.TextureCache[source]) {\n        texture = new this.Texture(this.TextureCache[source])\n      }\n    } // If the `source` is a texture,  use it\n    else if (source instanceof this.Texture) {\n      texture = new this.Texture(source)\n    }\n\n    if (texture) {\n      // Make a rectangle the size of the sub-image\n      texture.frame = new this.Rectangle(x, y, width, height)\n      return texture\n    }\n  } // #### getIndex\n  // The `getIndex` helper method\n  // converts a sprite's x and y position to an array index number.\n  // It returns a single index value that tells you the map array\n  // index number that the sprite is in\n\n\n  getIndex(x, y, tilewidth, tileheight, mapWidthInTiles) {\n    const index = {} // Convert pixel coordinates to map index coordinates\n\n    index.x = Math.floor(x / tilewidth)\n    index.y = Math.floor(y / tileheight) // Return the index number\n\n    return index.x + index.y * mapWidthInTiles\n  }\n  /*\n  #### getTile\n  The `getTile` helper method\n  converts a tile's index number into x/y screen\n  coordinates, and capture's the tile's grid index (`gid`) number.\n  It returns an object with `x`, `y`, `centerX`, `centerY`, `width`, `height`, `halfWidth`\n  `halffHeight` and `gid` properties. (The `gid` number is the value that the tile has in the\n  mapArray) This lets you use the returned object\n  with the 2d geometric collision functions like `hitTestRectangle`\n  or `rectangleCollision`\n   The `world` object requires these properties:\n  `x`, `y`, `tilewidth`, `tileheight` and `widthInTiles`\n  */\n\n\n  getTile(index, mapArray, world) {\n    const tile = {}\n    tile.gid = mapArray[index]\n    tile.width = world.tilewidth\n    tile.height = world.tileheight\n    tile.halfWidth = world.tilewidth / 2\n    tile.halfHeight = world.tileheight / 2\n    tile.x = index % world.widthInTiles * world.tilewidth + world.x\n    tile.y = Math.floor(index / world.widthInTiles) * world.tileheight + world.y\n    tile.gx = tile.x\n    tile.gy = tile.y\n    tile.centerX = tile.x + world.tilewidth / 2\n    tile.centery = tile.y + world.tileheight / 2 // Return the tile object\n\n    return tile\n  }\n  /*\n  #### surroundingCells\n  The `surroundingCells` helper method returns an array containing 9\n  index numbers of map array cells around any given index number.\n  Use it for an efficient broadphase/narrowphase collision test.\n  The 2 arguments are the index number that represents the center cell,\n  and the width of the map array.\n  */\n\n\n  surroundingCells(index, widthInTiles) {\n    return [index - widthInTiles - 1, index - widthInTiles, index - widthInTiles + 1, index - 1, index, index + 1, index + widthInTiles - 1, index + widthInTiles, index + widthInTiles + 1]\n  } // #### getPoints\n\n  /*\n  The `getPoints` method takes a sprite and returns\n  an object that tells you what all its corner points are. The return\n  object has four properties, each of which is an object with `x` and `y` properties:\n   - `topLeft`: `x` and `y` properties describing the top left corner\n  point.\n  - `topRight`: `x` and `y` properties describing the top right corner\n  point.\n  - `bottomLeft`: `x` and `y` properties describing the bottom left corner\n  point.\n  - `bottomRight`: `x` and `y` properties describing the bottom right corner\n  point.\n   If the sprite has a `collisionArea` property that defines a\n  smaller rectangular area inside the sprite, that collision\n  area can be used instead for collisions instead of the sprite's dimensions. Here's\n  How you could define a `collsionArea` on a sprite called `elf`:\n  ```js\n  elf.collisionArea = {x: 22, y: 44, width: 20, height: 20};\n  ```\n  Here's how you could use the `getPoints` method to find all the collision area's corner points.\n  ```js\n  let cornerPoints = tu.getPoints(elf.collisionArea);\n  ```\n  */\n\n\n  getPoints(s) {\n    const ca = s.collisionArea\n\n    if (ca !== undefined) {\n      return {\n        topLeft: {\n          x: s.x + ca.x,\n          y: s.y + ca.y\n        },\n        topRight: {\n          x: s.x + ca.x + ca.width,\n          y: s.y + ca.y\n        },\n        bottomLeft: {\n          x: s.x + ca.x,\n          y: s.y + ca.y + ca.height\n        },\n        bottomRight: {\n          x: s.x + ca.x + ca.width,\n          y: s.y + ca.y + ca.height\n        }\n      }\n    }\n\n    return {\n      topLeft: {\n        x: s.x,\n        y: s.y\n      },\n      topRight: {\n        x: s.x + s.width - 1,\n        y: s.y\n      },\n      bottomLeft: {\n        x: s.x,\n        y: s.y + s.height - 1\n      },\n      bottomRight: {\n        x: s.x + s.width - 1,\n        y: s.y + s.height - 1\n      }\n    }\n  } // ### hitTestTile\n\n  /*\n  `hitTestTile` checks for a\n  collision between a sprite and a tile in any map array that you\n  specify. It returns a `collision` object.\n  `collision.hit` is a Boolean that tells you if a sprite is colliding\n  with the tile that you're checking. `collision.index` tells you the\n  map array's index number of the colliding sprite. You can check for\n  a collision with the tile against \"every\" corner point on the\n  sprite, \"some\" corner points, or the sprite's \"center\" point.\n  `hitTestTile` arguments:\n  sprite, array, collisionTileGridIdNumber, worldObject, spritesPointsToCheck\n  ```js\n  tu.hitTestTile(sprite, array, collisioGid, world, pointsToCheck);\n  ```\n  The `world` object (the 4th argument) has to have these properties:\n  `tileheight`, `tilewidth`, `widthInTiles`.\n  Here's how you could use  `hitTestTile` to check for a collision between a sprite\n  called `alien` and an array of wall sprites with map gid numbers of 0.\n  ```js\n  let alienVsFloor = g.hitTestTile(alien, wallMapArray, 0, world, \"every\");\n  ```\n  */\n\n\n  hitTestTile(sprite, mapArray, gidToCheck, world, pointsToCheck) {\n    // The `checkPoints` helper function Loop through the sprite's corner points to\n    // find out if they are inside an array cell that you're interested in.\n    // Return `true` if they are\n    const checkPoints = key => {\n      // Get a reference to the current point to check.\n      // (`topLeft`, `topRight`, `bottomLeft` or `bottomRight` )\n      const point = sprite.collisionPoints[key] // Find the point's index number in the map array\n\n      collision.index = this.getIndex(point.x, point.y, world.tilewidth, world.tileheight, world.widthInTiles) // Find out what the gid value is in the map position\n      // that the point is currently over\n\n      collision.gid = mapArray[collision.index] // If it matches the value of the gid that we're interested, in\n      // then there's been a collision\n\n      if (collision.gid === gidToCheck) {\n        return true\n      }\n\n      return false\n    } // Assign \"some\" as the default value for `pointsToCheck`\n\n\n    pointsToCheck = pointsToCheck || 'some' // The collision object that will be returned by this function\n\n    let collision = {} // Which points do you want to check?\n    // \"every\", \"some\" or \"center\"?\n\n    switch (pointsToCheck) {\n    case 'center':\n      // `hit` will be true only if the center point is touching\n      sprite.collisionPoints = {\n        center: {\n          x: sprite.centerX,\n          y: sprite.centerY\n        }\n      }\n      collision.hit = Object.keys(sprite.collisionPoints).some(checkPoints)\n      break\n\n    case 'every':\n      // `hit` will be true if every point is touching\n      sprite.collisionPoints = this.getPoints(sprite)\n      collision.hit = Object.keys(sprite.collisionPoints).every(checkPoints)\n      break\n\n    case 'some':\n      // `hit` will be true only if some points are touching\n      sprite.collisionPoints = this.getPoints(sprite)\n      collision.hit = Object.keys(sprite.collisionPoints).some(checkPoints)\n      break\n    } // Return the collision object.\n    // `collision.hit` will be true if a collision is detected.\n    // `collision.index` tells you the map array index number where the\n    // collision occured\n\n\n    return collision\n  } // ### updateMap\n\n  /*\n  `updateMap` takes a map array and adds a sprite's grid index number (`gid`) to it.\n  It finds the sprite's new index position, and retuns the new map array.\n  You can use it to do very efficient collision detection in tile based game worlds.\n  `updateMap` arguments:\n  array, singleSpriteOrArrayOfSprites, worldObject\n  The `world` object (the 4th argument) has to have these properties:\n  `tileheight`, `tilewidth`, `widthInTiles`.\n  The sprite objects have to have have these properties:\n  `centerX`, `centerY`, `index`, `gid` (The number in the array that represpents the sprite)\n  Here's an example of how you could use `updateMap` in your game code like this:\n       blockLayer.data = updateMap(blockLayer.data, blockLayer.children, world);\n   The `blockLayer.data` array would now contain the new index position numbers of all the\n  child sprites on that layer.\n  */\n\n\n  updateMap(mapArray, spritesToUpdate, world) {\n    // First create a map a new array filled with zeros.\n    // The new map array will be exactly the same size as the original\n    const newMapArray = mapArray.map(gid => {\n      gid = 0\n      return gid\n    }) // Is `spriteToUpdate` an array of sprites?\n\n    if (spritesToUpdate instanceof Array) {\n      // Get the index number of each sprite in the `spritesToUpdate` array\n      // and add the sprite's `gid` to the matching index on the map\n      const self = this\n      spritesToUpdate.forEach(sprite => {\n        // Find the new index number\n        sprite.index = self.getIndex(sprite.centerX, sprite.centerY, world.tilewidth, world.tileheight, world.widthInTiles) // Add the sprite's `gid` number to the correct index on the map\n\n        newMapArray[sprite.index] = sprite.gid\n      })\n    } // Is `spritesToUpdate` just a single sprite?\n    else {\n      const sprite = spritesToUpdate // Find the new index number\n\n      sprite.index = this.getIndex(sprite.centerX, sprite.centerY, world.tilewidth, world.tileheight, world.widthInTiles) // Add the sprite's `gid` number to the correct index on the map\n\n      newMapArray[sprite.index] = sprite.gid\n    } // Return the new map array to replace the previous one\n\n\n    return newMapArray\n  }\n  /*\n  ###makeTiledWorld\n   `makeTiledWorld` is a quick and easy way to display a game world designed in\n  Tiled Editor. Supply `makeTiledWorld` with 2 **string arguments**:\n   1. A JSON file generated by Tiled Editor.\n  2. A source image that represents the tile set you used to create the Tiled Editor world.\n  ```js\n  let world = makeTiledWorld(\"tiledEditorMapData.json\", \"tileset.png\");\n  ```\n  (Note: `makeTiledWorld` looks for the JSON data file in Pixi's `loader.resources` object. So,\n  make sure you've loaded the JSON file using Pixi's `loader`.)\n   `makeTiledWorld` will return a Pixi `Container` that contains all the things in your Tiled Editor\n  map as Pixi sprites.\n   All the image tiles you create in Tiled Editor are automatically converted into Pixi sprites\n  for you by `makeTiledWorld`. You can access all of them using two methods: `getObject` (for\n  single sprites) and `getObjects` (with an \"s\") for multiple sprites. Let's find out how they work.\n   ####world.getObject\n   Tile Editor lets you assign a \"name\" properties any object.\n  You can access any sprite by this name using the `getObject` method. `getObject` searches for and\n  returns a sprite in the `world` that has the same `name` property that you assigned\n  in Tiled Editor. Here's how to use `getObject` to look for an object called \"alien\"\n  in the Tiled map data and assign it to a variable called `alien`\n  ```js\n  let alien = world.getObject(\"alien\");\n  ```\n  `alien` is now an ordinary Pixi sprite that you can control just like any other Pixi\n  sprite in your games.\n   #### Creating sprites from generic objects\n   Tiled Editor lets you create generic objects. These are objects that don't have images associated\n  with them. Generic objects are handy to use, because they let you create complex game objects inside\n  Tiled Editor, as pure data. You can then use that data your game code to build complex game objects.\n   For example, imagine that you want to create a complex animated walking sprite called \"elf\".\n  First, create the elf object in Tiled Editor as a generic object, but don't assign any image tiles\n  to it. Next, in your game code, create a new Pixi MovieClip called `elf` and give it any textures you want\n  to use for its animation states.\n  ```js\n  //Create a new Pixi MovieClip sprite\n  let elf = new PIXI.MovieClip(elfSpriteTextures);\n  ```\n  Then use the `x` and `y` data from the generic \"elf\" object you created in Tiled Editor to position the\n  `elf` sprite.\n  ```js\n  elf.x = world.getObject(\"elf\").x;\n  elf.y = world.getObject(\"elf\").y;\n  ```\n  This is a simple example, but you could make very complex data objects in Tiled Editor and\n  use them to build complex sprites in the same way.\n   ####Accessing Tiled Editor layer groups\n   Tiled Editor lets you create **layer groups**. Each layer group you create\n  in Tiled Editor is automatically converted by `makeTiledWorld` into a Pixi `Container`\n  object. You can access those containers using `getObject` to extract the layer group\n  container.\n   Here's how you could extract the layer group called \"objects\" and add the\n  `elf` sprite to it.\n  ```js\n  let objectsLayer = world.getObject(\"objects\");\n  objectsLayer.addChild(elf);\n  ```\n  If you want to add the sprite to a different world layer, you can do it like this:\n  ```js\n  world.getObject(\"treeTops\").addChild(elf);\n  ```\n  If you want to access all the sprites in a specific Tiled Editor layer, just supply\n  `getObject` with the name of the layer. For example, if the layer name is \"items\", you\n  can access it like this:\n  ```js\n  let itemsLayer = world.getObject(\"items\");\n  ```\n  `itemsLayer` is now a Pixi container with a `children` array that contains all the sprites\n  on that layer.\n   To be safe, clone this array to create a new version\n  that doesn't point to the original data file:\n  ```js\n  items = itemsLayer.children.slice(0);\n  ```\n  You can now manipulate the `items` array freely without worrying about changing\n  the original array. This can possibly help prevent some weird bugs in a complex game.\n   ###Finding the \"gid\" values\n   Tiled Editor uses \"gid\" numbers to identify different kinds of things in the world.\n  If you ever need to extract sprites with specific `gid` numbers in a\n  layer that contains different kinds of things, you can do it like this:\n  ```js\n  let items = itemsLayer.children.map(sprite => {\n    if (sprite.gid !== 0) return sprite;\n  });\n  ```\n  Every sprite created by `makeTiledWorld` has a `gid` property with a value that matches its\n  Tiled Editor \"gid\" value.\n   ####Accessing a layer's \"data\" array\n   Tiled Editor's layers have a `data` property\n  that is an array containing all the grid index numbers (`gid`) of\n  the tiles in that array. Imagine that you've got a layer full of similar\n  tiles representing the walls in a game. How do you access the array\n  containing all the \"gid\" numbers of the wall sprites in that layer? If the layer's name is called \"wallLayer\", you\n  can access the `wallLayer`'s `data` array of sprites like this:\n  ```js\n  wallMapArray = world.getObject(\"wallLayer\").data;\n  ```\n  `wallMapArray` is now an array of \"gid\" numbers referring to all the sprites on that\n  layer. You can now use this data for collision detection, or doing any other kind\n  of world building.\n   ###world.getObjects\n   There's another method called `getObjects` (with an \"s\"!) that lets you extract\n  an array of sprites from the Tiled Editor data. Imagine that you created three\n  game objects in Tiled Editor called \"marmot\", \"skull\" and \"heart\". `makeTiledWorld`\n  automatically turns them into sprites, and you can access\n  all of them as array of sprites using `getObjects` like this:\n  ```js\n  let gameItemsArray = world.getObjects(\"marmot\", \"skull\", \"heart\");\n  ```\n  */\n\n\n  makeTiledWorld(jsonTiledMap, tileset) {\n    // Create a group called `world` to contain all the layers, sprites\n    // and objects from the `tiledMap`. The `world` object is going to be\n    // returned to the main game program\n    const tiledMap = typeof jsonTiledMap === 'string' ? this.resources[jsonTiledMap].data : jsonTiledMap\n    const world = new this.Container()\n    world.tileheight = tiledMap.tileheight\n    world.tilewidth = tiledMap.tilewidth // Calculate the `width` and `height` of the world, in pixels\n\n    world.worldWidth = tiledMap.width * tiledMap.tilewidth\n    world.worldHeight = tiledMap.height * tiledMap.tileheight // Get a reference to the world's height and width in\n    // tiles, in case you need to know this later (you will!)\n\n    world.widthInTiles = tiledMap.width\n    world.heightInTiles = tiledMap.height // Create an `objects` array to store references to any\n    // named objects in the map. Named objects all have\n    // a `name` property that was assigned in Tiled Editor\n\n    world.objects = [] // The optional spacing (padding) around each tile\n    // This is to account for spacing around tiles\n    // that's commonly used with texture atlas tilesets. Set the\n    // `spacing` property when you create a new map in Tiled Editor\n\n    const spacing = tiledMap.tilesets[0].spacing // Figure out how many columns there are on the tileset.\n    // This is the width of the image, divided by the width\n    // of each tile, plus any optional spacing thats around each tile\n\n    const numberOfTilesetColumns = Math.floor(tiledMap.tilesets[0].imagewidth / (tiledMap.tilewidth + spacing)) // Loop through all the map layers\n\n    tiledMap.layers.forEach(tiledLayer => {\n      // Make a group for this layer and copy\n      // all of the layer properties onto it.\n      const layerGroup = new this.Container()\n      Object.keys(tiledLayer).forEach(key => {\n        // Add all the layer's properties to the group, except the\n        // width and height (because the group will work those our for\n        // itself based on its content).\n        if (key !== 'width' && key !== 'height') {\n          layerGroup[key] = tiledLayer[key]\n        }\n      }) // Set the width and height of the layer to\n      // the `world`'s width and height\n      // layerGroup.width = world.width;\n      // layerGroup.height = world.height;\n      // Translate `opacity` to `alpha`\n\n      layerGroup.alpha = tiledLayer.opacity // Add the group to the `world`\n\n      world.addChild(layerGroup) // Push the group into the world's `objects` array\n      // So you can access it later\n\n      world.objects.push(layerGroup) // Is this current layer a `tilelayer`?\n\n      if (tiledLayer.type === 'tilelayer') {\n        // Loop through the `data` array of this layer\n        tiledLayer.data.forEach((gid, index) => {\n          let tileSprite, texture, mapX, mapY, tilesetX, tilesetY, mapColumn, mapRow, tilesetColumn, tilesetRow // If the grid id number (`gid`) isn't zero, create a sprite\n\n          if (gid !== 0) {\n            // Figure out the map column and row number that we're on, and then\n            // calculate the grid cell's x and y pixel position.\n            mapColumn = index % world.widthInTiles\n            mapRow = Math.floor(index / world.widthInTiles)\n            mapX = mapColumn * world.tilewidth\n            mapY = mapRow * world.tileheight // Figure out the column and row number that the tileset\n            // image is on, and then use those values to calculate\n            // the x and y pixel position of the image on the tileset\n\n            tilesetColumn = (gid - 1) % numberOfTilesetColumns\n            tilesetRow = Math.floor((gid - 1) / numberOfTilesetColumns)\n            tilesetX = tilesetColumn * world.tilewidth\n            tilesetY = tilesetRow * world.tileheight // Compensate for any optional spacing (padding) around the tiles if\n            // there is any. This bit of code accumlates the spacing offsets from the\n            // left side of the tileset and adds them to the current tile's position\n\n            if (spacing > 0) {\n              tilesetX += spacing + spacing * ((gid - 1) % numberOfTilesetColumns)\n              tilesetY += spacing + spacing * Math.floor((gid - 1) / numberOfTilesetColumns)\n            } // Use the above values to create the sprite's image from\n            // the tileset image\n\n\n            texture = this.frame(tileset, tilesetX, tilesetY, world.tilewidth, world.tileheight) // I've dedcided that any tiles that have a `name` property are important\n            // and should be accessible in the `world.objects` array.\n\n            let tileproperties = tiledMap.tilesets[0].tileproperties || {}\n            let key = String(gid - 1) // If the JSON `tileproperties` object has a sub-object that\n            // matches the current tile, and that sub-object has a `name` property,\n            // then create a sprite and assign the tile properties onto\n            // the sprite\n\n            if (tileproperties[key] && tileproperties[key].name) {\n              // Make a sprite\n              tileSprite = new this.Sprite(texture) // Copy all of the tile's properties onto the sprite\n              // (This includes the `name` property)\n\n              Object.keys(tileproperties[key]).forEach(property => {\n                // console.log(tileproperties[key][property])\n                tileSprite[property] = tileproperties[key][property]\n              }) // Push the sprite into the world's `objects` array\n              // so that you can access it by `name` later\n\n              world.objects.push(tileSprite)\n            } // If the tile doesn't have a `name` property, just use it to\n            // create an ordinary sprite (it will only need one texture)\n            else {\n              tileSprite = new this.Sprite(texture)\n            } // Position the sprite on the map\n\n\n            tileSprite.x = mapX\n            tileSprite.y = mapY // Make a record of the sprite's index number in the array\n            // (We'll use this for collision detection later)\n\n            tileSprite.index = index // Make a record of the sprite's `gid` on the tileset.\n            // This will also be useful for collision detection later\n\n            tileSprite.gid = gid // Add the sprite to the current layer group\n\n            layerGroup.addChild(tileSprite)\n          }\n        })\n      } // Is this layer an `objectgroup`?\n\n\n      if (tiledLayer.type === 'objectgroup') {\n        tiledLayer.objects.forEach(object => {\n          // We're just going to capture the object's properties\n          // so that we can decide what to do with it later\n          // Get a reference to the layer group the object is in\n          object.group = layerGroup // Because this is an object layer, it doesn't contain any\n          // sprites, just data object. That means it won't be able to\n          // calucalte its own height and width. To help it out, give\n          // the `layerGroup` the same `width` and `height` as the `world`\n          // layerGroup.width = world.width;\n          // layerGroup.height = world.height;\n          // Push the object into the world's `objects` array\n\n          world.objects.push(object)\n        })\n      }\n    }) // Search functions\n    // `world.getObject` and `world.getObjects`  search for and return\n    // any sprites or objects in the `world.objects` array.\n    // Any object that has a `name` propery in\n    // Tiled Editor will show up in a search.\n    // `getObject` gives you a single object, `getObjects` gives you an array\n    // of objects.\n    // `getObject` returns the actual search function, so you\n    // can use the following format to directly access a single object:\n    // sprite.x = world.getObject(\"anySprite\").x;\n    // sprite.y = world.getObject(\"anySprite\").y;\n\n    world.getObject = objectName => {\n      const searchForObject = () => {\n        let foundObject\n        world.objects.some(object => {\n          if (object.name && object.name === objectName) {\n            foundObject = object\n            return true\n          }\n        })\n\n        if (foundObject) {\n          return foundObject\n        }\n\n        throw new Error(`There is no object with the property name: ${objectName}`)\n      } // Return the search function\n\n\n      return searchForObject()\n    }\n\n    world.getObjects = objectNames => {\n      const foundObjects = []\n      world.objects.forEach(object => {\n        if (object.name && objectNames.indexOf(object.name) !== -1) {\n          foundObjects.push(object)\n        }\n      })\n\n      if (foundObjects.length > 0) {\n        return foundObjects\n      }\n\n      throw new Error('I could not find those objects')\n    } // That's it, we're done!\n    // Finally, return the `world` object back to the game program\n\n\n    return world\n  }\n  /* Isometric tile utilities */\n\n  /*\n  ### byDepth\n  And array `sort` function that depth-sorts sprites according to\n  their `z` properties\n  */\n\n\n  byDepth(a, b) {\n    // Calculate the depths of `a` and `b`\n    // (add `1` to `a.z` and `b.x` to avoid multiplying by 0)\n    a.depth = (a.cartX + a.cartY) * (a.z + 1)\n    b.depth = (b.cartX + b.cartY) * (b.z + 1) // Move sprites with a lower depth to a higher position in the array\n\n    if (a.depth < b.depth) {\n      return -1\n    } else if (a.depth > b.depth) {\n      return 1\n    }\n\n    return 0\n  }\n  /*\n  ### hitTestIsoTile\n  Same API as `hitTestTile`, except that it works with isometric sprites.\n  Make sure that your `world` object has properties called\n  `cartTileWidth` and `cartTileHeight` that define the Cartesian with and\n  height of your tile cells, in pixels.\n   */\n\n\n  hitTestIsoTile(sprite, mapArray, gidToCheck, world, pointsToCheck) {\n    // The `checkPoints` helper function Loop through the sprite's corner points to\n    // find out if they are inside an array cell that you're interested in.\n    // Return `true` if they are\n    const checkPoints = key => {\n      // Get a reference to the current point to check.\n      // (`topLeft`, `topRight`, `bottomLeft` or `bottomRight` )\n      const point = sprite.collisionPoints[key] // Find the point's index number in the map array\n\n      collision.index = this.getIndex(point.x, point.y, world.cartTilewidth, world.cartTileheight, world.widthInTiles) // Find out what the gid value is in the map position\n      // that the point is currently over\n\n      collision.gid = mapArray[collision.index] // If it matches the value of the gid that we're interested, in\n      // then there's been a collision\n\n      if (collision.gid === gidToCheck) {\n        return true\n      }\n\n      return false\n    } // Assign \"some\" as the default value for `pointsToCheck`\n\n\n    pointsToCheck = pointsToCheck || 'some' // The collision object that will be returned by this function\n\n    let collision = {} // Which points do you want to check?\n    // \"every\", \"some\" or \"center\"?\n\n    switch (pointsToCheck) {\n    case 'center':\n      // `hit` will be true only if the center point is touching\n      sprite.collisionPoints = {\n        center: {\n          x: sprite.centerX,\n          y: sprite.centerY // x: s.cartX + ca.x + (ca.width / 2),\n          // y: s.cartY + ca.y + (ca.height / 2)\n\n        }\n      }\n      collision.hit = Object.keys(sprite.collisionPoints).some(checkPoints)\n      break\n\n    case 'every':\n      // `hit` will be true if every point is touching\n      sprite.collisionPoints = this.getIsoPoints(sprite)\n      collision.hit = Object.keys(sprite.collisionPoints).every(checkPoints)\n      break\n\n    case 'some':\n      // `hit` will be true only if some points are touching\n      sprite.collisionPoints = this.getIsoPoints(sprite)\n      collision.hit = Object.keys(sprite.collisionPoints).some(checkPoints)\n      break\n    } // Return the collision object.\n    // `collision.hit` will be true if a collision is detected.\n    // `collision.index` tells you the map array index number where the\n    // collision occured\n\n\n    return collision\n  }\n  /*\n  ### getIsoPoints\n  The isomertic version of `getPoints`\n  */\n\n\n  getIsoPoints(s) {\n    const ca = s.collisionArea\n\n    if (ca !== undefined) {\n      return {\n        topLeft: {\n          x: s.cartX + ca.x,\n          y: s.cartY + ca.y\n        },\n        topRight: {\n          x: s.cartX + ca.x + ca.width,\n          y: s.cartY + ca.y\n        },\n        bottomLeft: {\n          x: s.cartX + ca.x,\n          y: s.cartY + ca.y + ca.height\n        },\n        bottomRight: {\n          x: s.cartX + ca.x + ca.width,\n          y: s.cartY + ca.y + ca.height\n        }\n      }\n    }\n\n    return {\n      topLeft: {\n        x: s.cartX,\n        y: s.cartY\n      },\n      topRight: {\n        x: s.cartX + s.cartWidth - 1,\n        y: s.cartY\n      },\n      bottomLeft: {\n        x: s.cartX,\n        y: s.cartY + s.cartHeight - 1\n      },\n      bottomRight: {\n        x: s.cartX + s.cartWidth - 1,\n        y: s.cartY + s.cartHeight - 1\n      }\n    }\n  }\n  /*\n  ### makeIsoPointer\n  Used to add a isometric properties to any mouse/touch `pointer` object with\n  `x` and `y` properties. Supply `makeIsoPointer` with the pointer object and\n  the isometric `world` object\n  */\n  // Create some useful properties on the pointer\n\n\n  makeIsoPointer(pointer, world) {\n    Object.defineProperties(pointer, {\n      // The isometric's world's Cartesian coordiantes\n      cartX: {\n        get() {\n          const x = (2 * this.y + this.x - (2 * world.y + world.x)) / 2 - world.cartTilewidth / 2\n          return x\n        },\n\n        enumerable: true,\n        configurable: true\n      },\n      cartY: {\n        get() {\n          const y = (2 * this.y - this.x - (2 * world.y - world.x)) / 2 + world.cartTileheight / 2\n          return y\n        },\n\n        enumerable: true,\n        configurable: true\n      },\n      // The tile's column and row in the array\n      column: {\n        get() {\n          return Math.floor(this.cartX / world.cartTilewidth)\n        },\n\n        enumerable: true,\n        configurable: true\n      },\n      row: {\n        get() {\n          return Math.floor(this.cartY / world.cartTileheight)\n        },\n\n        enumerable: true,\n        configurable: true\n      },\n      // The tile's index number in the array\n      index: {\n        get() {\n          const index = {} // Convert pixel coordinates to map index coordinates\n\n          index.x = Math.floor(this.cartX / world.cartTilewidth)\n          index.y = Math.floor(this.cartY / world.cartTileheight) // Return the index number\n\n          return index.x + index.y * world.widthInTiles\n        },\n\n        enumerable: true,\n        configurable: true\n      }\n    })\n  }\n  /*\n  ### isoRectangle\n  A function for creating a simple isometric diamond\n  shaped rectangle using Pixi's graphics library\n  */\n\n\n  isoRectangle(width, height, fillStyle) {\n    // Figure out the `halfHeight` value\n    const halfHeight = height / 2 // Draw the flattened and rotated square (diamond shape)\n\n    const rectangle = new this.Graphics()\n    rectangle.beginFill(fillStyle)\n    rectangle.moveTo(0, 0)\n    rectangle.lineTo(width, halfHeight)\n    rectangle.lineTo(0, height)\n    rectangle.lineTo(-width, halfHeight)\n    rectangle.lineTo(0, 0)\n    rectangle.endFill() // Generate a texture from the rectangle\n\n    const texture = rectangle.generateTexture() // Use the texture to create a sprite\n\n    const sprite = new this.Sprite(texture) // Return it to the main program\n\n    return sprite\n  }\n  /*\n  ### addIsoProperties\n  Add properties to a sprite to help work between Cartesian\n  and isometric properties: `isoX`, `isoY`, `cartX`,\n  `cartWidth` and `cartHeight`.\n  */\n\n\n  addIsoProperties(sprite, x, y, width, height) {\n    // Cartisian (flat 2D) properties\n    sprite.cartX = x\n    sprite.cartY = y\n    sprite.cartWidth = width\n    sprite.cartHeight = height // Add a getter/setter for the isometric properties\n\n    Object.defineProperties(sprite, {\n      isoX: {\n        get() {\n          return this.cartX - this.cartY\n        },\n\n        enumerable: true,\n        configurable: true\n      },\n      isoY: {\n        get() {\n          return (this.cartX + this.cartY) / 2\n        },\n\n        enumerable: true,\n        configurable: true\n      }\n    })\n  }\n  /*\n  ### makeIsoTiledWorld\n  Make an isometric world from TiledEditor map data. Uses the same API as `makeTiledWorld`\n   */\n\n\n  makeIsoTiledWorld(jsonTiledMap, tileset) {\n    // Create a group called `world` to contain all the layers, sprites\n    // and objects from the `tiledMap`. The `world` object is going to be\n    // returned to the main game program\n    const tiledMap = typeof jsonTiledMap === 'string' ? this.resources[jsonTiledMap].data : jsonTiledMap // A. You need to add three custom properties to your Tiled Editor\n    // map: `cartTilewidth`,`cartTileheight` and `tileDepth`. They define the Cartesian\n    // dimesions of the tiles (32x32x64).\n    // Check to make sure that these custom properties exist\n\n    if (!tiledMap.properties.cartTilewidth && !tiledMap.properties.cartTileheight && !tiledMap.properties.tileDepth) {\n      throw new Error('Set custom cartTilewidth, cartTileheight and tileDepth map properties in Tiled Editor')\n    } // Create the `world` container\n\n\n    const world = new this.Container() // B. Set the `tileHeight` to the `tiledMap`'s `tileDepth` property\n    // so that it matches the pixel height of the sprite tile image\n\n    world.tileheight = parseInt(tiledMap.properties.tileDepth)\n    world.tilewidth = tiledMap.tilewidth // C. Define the Cartesian dimesions of each tile\n\n    world.cartTileheight = parseInt(tiledMap.properties.cartTileheight)\n    world.cartTilewidth = parseInt(tiledMap.properties.cartTilewidth) // D. Calculate the `width` and `height` of the world, in pixels\n    // using the `world.cartTileHeight` and `world.cartTilewidth`\n    // values\n\n    world.worldWidth = tiledMap.width * world.cartTilewidth\n    world.worldHeight = tiledMap.height * world.cartTileheight // Get a reference to the world's height and width in\n    // tiles, in case you need to know this later (you will!)\n\n    world.widthInTiles = tiledMap.width\n    world.heightInTiles = tiledMap.height // Create an `objects` array to store references to any\n    // named objects in the map. Named objects all have\n    // a `name` property that was assigned in Tiled Editor\n\n    world.objects = [] // The optional spacing (padding) around each tile\n    // This is to account for spacing around tiles\n    // that's commonly used with texture atlas tilesets. Set the\n    // `spacing` property when you create a new map in Tiled Editor\n\n    const spacing = tiledMap.tilesets[0].spacing // Figure out how many columns there are on the tileset.\n    // This is the width of the image, divided by the width\n    // of each tile, plus any optional spacing thats around each tile\n\n    const numberOfTilesetColumns = Math.floor(tiledMap.tilesets[0].imagewidth / (tiledMap.tilewidth + spacing)) // E. A `z` property to help track which depth level the sprites are on\n\n    let z = 0 // Loop through all the map layers\n\n    tiledMap.layers.forEach(tiledLayer => {\n      // Make a group for this layer and copy\n      // all of the layer properties onto it.\n      const layerGroup = new this.Container()\n      Object.keys(tiledLayer).forEach(key => {\n        // Add all the layer's properties to the group, except the\n        // width and height (because the group will work those our for\n        // itself based on its content).\n        if (key !== 'width' && key !== 'height') {\n          layerGroup[key] = tiledLayer[key]\n        }\n      }) // Translate `opacity` to `alpha`\n\n      layerGroup.alpha = tiledLayer.opacity // Add the group to the `world`\n\n      world.addChild(layerGroup) // Push the group into the world's `objects` array\n      // So you can access it later\n\n      world.objects.push(layerGroup) // Is this current layer a `tilelayer`?\n\n      if (tiledLayer.type === 'tilelayer') {\n        // Loop through the `data` array of this layer\n        tiledLayer.data.forEach((gid, index) => {\n          let tileSprite, texture, mapX, mapY, tilesetX, tilesetY, mapColumn, mapRow, tilesetColumn, tilesetRow // If the grid id number (`gid`) isn't zero, create a sprite\n\n          if (gid !== 0) {\n            // Figure out the map column and row number that we're on, and then\n            // calculate the grid cell's x and y pixel position.\n            mapColumn = index % world.widthInTiles\n            mapRow = Math.floor(index / world.widthInTiles) // F. Use the Cartesian values to find the\n            // `mapX` and `mapY` values\n\n            mapX = mapColumn * world.cartTilewidth\n            mapY = mapRow * world.cartTileheight // Figure out the column and row number that the tileset\n            // image is on, and then use those values to calculate\n            // the x and y pixel position of the image on the tileset\n\n            tilesetColumn = (gid - 1) % numberOfTilesetColumns\n            tilesetRow = Math.floor((gid - 1) / numberOfTilesetColumns)\n            tilesetX = tilesetColumn * world.tilewidth\n            tilesetY = tilesetRow * world.tileheight // Compensate for any optional spacing (padding) around the tiles if\n            // there is any. This bit of code accumlates the spacing offsets from the\n            // left side of the tileset and adds them to the current tile's position\n\n            if (spacing > 0) {\n              tilesetX += spacing + spacing * ((gid - 1) % numberOfTilesetColumns)\n              tilesetY += spacing + spacing * Math.floor((gid - 1) / numberOfTilesetColumns)\n            } // Use the above values to create the sprite's image from\n            // the tileset image\n\n\n            texture = this.frame(tileset, tilesetX, tilesetY, world.tilewidth, world.tileheight) // I've dedcided that any tiles that have a `name` property are important\n            // and should be accessible in the `world.objects` array.\n\n            let tileproperties = tiledMap.tilesets[0].tileproperties || {}\n            let key = String(gid - 1) // If the JSON `tileproperties` object has a sub-object that\n            // matches the current tile, and that sub-object has a `name` property,\n            // then create a sprite and assign the tile properties onto\n            // the sprite\n\n            if (tileproperties[key] && tileproperties[key].name) {\n              // Make a sprite\n              tileSprite = new this.Sprite(texture) // Copy all of the tile's properties onto the sprite\n              // (This includes the `name` property)\n\n              Object.keys(tileproperties[key]).forEach(property => {\n                // console.log(tileproperties[key][property])\n                tileSprite[property] = tileproperties[key][property]\n              }) // Push the sprite into the world's `objects` array\n              // so that you can access it by `name` later\n\n              world.objects.push(tileSprite)\n            } // If the tile doesn't have a `name` property, just use it to\n            // create an ordinary sprite (it will only need one texture)\n            else {\n              tileSprite = new this.Sprite(texture)\n            } // G. Add isometric properties to the sprite\n\n\n            this.addIsoProperties(tileSprite, mapX, mapY, world.cartTilewidth, world.cartTileheight) // H. Use the isometric position to add the sprite to the world\n\n            tileSprite.x = tileSprite.isoX\n            tileSprite.y = tileSprite.isoY\n            tileSprite.z = z // Make a record of the sprite's index number in the array\n            // (We'll use this for collision detection later)\n\n            tileSprite.index = index // Make a record of the sprite's `gid` on the tileset.\n            // This will also be useful for collision detection later\n\n            tileSprite.gid = gid // Add the sprite to the current layer group\n\n            layerGroup.addChild(tileSprite)\n          }\n        })\n      } // Is this layer an `objectgroup`?\n\n\n      if (tiledLayer.type === 'objectgroup') {\n        tiledLayer.objects.forEach(object => {\n          // We're just going to capture the object's properties\n          // so that we can decide what to do with it later\n          // Get a reference to the layer group the object is in\n          object.group = layerGroup // Push the object into the world's `objects` array\n\n          world.objects.push(object)\n        })\n      } // I. Add 1 to the z index (the first layer will have a z index of `1`)\n\n\n      z += 1\n    }) // Search functions\n    // `world.getObject` and `world.getObjects`  search for and return\n    // any sprites or objects in the `world.objects` array.\n    // Any object that has a `name` propery in\n    // Tiled Editor will show up in a search.\n    // `getObject` gives you a single object, `getObjects` gives you an array\n    // of objects.\n    // `getObject` returns the actual search function, so you\n    // can use the following format to directly access a single object:\n    // sprite.x = world.getObject(\"anySprite\").x;\n    // sprite.y = world.getObject(\"anySprite\").y;\n\n    world.getObject = objectName => {\n      const searchForObject = () => {\n        let foundObject\n        world.objects.some(object => {\n          if (object.name && object.name === objectName) {\n            foundObject = object\n            return true\n          }\n        })\n\n        if (foundObject) {\n          return foundObject\n        }\n\n        throw new Error(`There is no object with the property name: ${objectName}`)\n      } // Return the search function\n\n\n      return searchForObject()\n    }\n\n    world.getObjects = objectNames => {\n      const foundObjects = []\n      world.objects.forEach(object => {\n        if (object.name && objectNames.indexOf(object.name) !== -1) {\n          foundObjects.push(object)\n        }\n      })\n\n      if (foundObjects.length > 0) {\n        return foundObjects\n      }\n\n      throw new Error('I could not find those objects')\n    } // That's it, we're done!\n    // Finally, return the `world` object back to the game program\n\n\n    return world\n  }\n  /*\n  //### The `shortestPath` function\n  An A-Star search algorithm that returns an array of grid index numbers that\n  represent the shortest path between two points on a map. Use it like this:\n  let shortestPath = tu.shortestPath(\n  startIndex,               //The start map index\n  destinationIndex,         //The destination index\n  mapArray,                 //The map array\n  mapWidthInTiles,          //Map wdith, in tiles\n  [1,2],                    //Obstacle gid array\n  \"manhattan\"               //Heuristic to use: \"manhatten\", \"euclidean\" or \"diagonal\"\n  );\n  */\n\n\n  shortestPath(startIndex, destinationIndex, mapArray, mapWidthInTiles, obstacleGids = [], heuristic = 'manhattan', useDiagonalNodes = true) {\n    // The `nodes` function creates the array of node objects\n    const nodes = (mapArray, mapWidthInTiles) => mapArray.map((cell, index) => {\n      // Figure out the row and column of this cell\n      const column = index % mapWidthInTiles\n      const row = Math.floor(index / mapWidthInTiles) // The node object\n\n      return {\n        f: 0,\n        g: 0,\n        h: 0,\n        parent: null,\n        column,\n        row,\n        index\n      }\n    }) // Initialize theShortestPath array\n\n\n    const theShortestPath = [] // Initialize the node map\n\n    const nodeMap = nodes(mapArray, mapWidthInTiles) // Initialize the closed and open list arrays\n\n    const closedList = []\n    let openList = [] // Declare the \"costs\" of travelling in straight or\n    // diagonal lines\n\n    const straightCost = 10\n    const diagonalCost = 14 // Get the start node\n\n    const startNode = nodeMap[startIndex] // Get the current center node. The first one will\n    // match the path's start position\n\n    let centerNode = startNode // Push the `centerNode` into the `openList`, because\n    // it's the first node that we're going to check\n\n    openList.push(centerNode) // Get the current destination node. The first one will\n    // match the path's end position\n\n    const destinationNode = nodeMap[destinationIndex] // All the nodes that are surrounding the current map index number\n\n    const surroundingNodes = (index, mapArray, mapWidthInTiles, useDiagonalNodes) => {\n      // Find out what all the surrounding nodes are, including those that\n      // might be beyond the borders of the map\n      const allSurroundingNodes = [nodeMap[index - mapWidthInTiles - 1], nodeMap[index - mapWidthInTiles], nodeMap[index - mapWidthInTiles + 1], nodeMap[index - 1], nodeMap[index + 1], nodeMap[index + mapWidthInTiles - 1], nodeMap[index + mapWidthInTiles], nodeMap[index + mapWidthInTiles + 1]] // Optionaly exlude the diagonal nodes, which is often perferable\n      // for 2D maze games\n\n      const crossSurroundingNodes = [nodeMap[index - mapWidthInTiles], nodeMap[index - 1], nodeMap[index + 1], nodeMap[index + mapWidthInTiles]] // Use either `allSurroundingNodes` or `crossSurroundingNodes` depending\n      // on the the value of `useDiagonalNodes`\n\n      let nodesToCheck\n\n      if (useDiagonalNodes) {\n        nodesToCheck = allSurroundingNodes\n      } else {\n        nodesToCheck = crossSurroundingNodes\n      } // Find the valid sourrounding nodes, which are ones inside\n      // the map border that don't incldue obstacles. Change `allSurroundingNodes`\n      // to `crossSurroundingNodes` to prevent the path from choosing diagonal routes\n\n\n      const validSurroundingNodes = nodesToCheck.filter(node => {\n        // The node will be beyond the top and bottom edges of the\n        // map if it is `undefined`\n        const nodeIsWithinTopAndBottomBounds = node !== undefined // Only return nodes that are within the top and bottom map bounds\n\n        if (nodeIsWithinTopAndBottomBounds) {\n          // Some Boolean values that tell us whether the current map index is on\n          // the left or right border of the map, and whether any of the nodes\n          // surrounding that index extend beyond the left and right borders\n          const indexIsOnLeftBorder = index % mapWidthInTiles === 0\n          const indexIsOnRightBorder = (index + 1) % mapWidthInTiles === 0\n          const nodeIsBeyondLeftBorder = node.column % (mapWidthInTiles - 1) === 0 && node.column !== 0\n          const nodeIsBeyondRightBorder = node.column % mapWidthInTiles === 0 // Find out whether of not the node contains an obstacle by looping\n          // through the obstacle gids and and returning `true` if it\n          // finds any at this node's location\n\n          const nodeContainsAnObstacle = obstacleGids.some(obstacle => mapArray[node.index] === obstacle) // If the index is on the left border and any nodes surrounding it are beyond the\n          // left border, don't return that node\n\n          if (indexIsOnLeftBorder) {\n            // console.log(\"left border\")\n            return !nodeIsBeyondLeftBorder\n          } // If the index is on the right border and any nodes surrounding it are beyond the\n          // right border, don't return that node\n          else if (indexIsOnRightBorder) {\n            // console.log(\"right border\")\n            return !nodeIsBeyondRightBorder\n          } // Return `true` if the node doesn't contain any obstacles\n          else if (nodeContainsAnObstacle) {\n            return false\n          } // The index must be inside the area defined by the left and right borders,\n          // so return the node\n          // console.log(\"map interior\")\n\n\n          return true\n        }\n      }) // console.log(validSurroundingNodes)\n      // Return the array of `validSurroundingNodes`\n\n      return validSurroundingNodes\n    } // Diagnostic\n    // console.log(nodeMap);\n    // console.log(centerNode);\n    // console.log(destinationNode);\n    // console.log(wallMapArray);\n    // console.log(surroundingNodes(86, mapArray, mapWidthInTiles));\n    // Heuristic methods\n    // 1. Manhattan\n\n\n    const manhattan = (testNode, destinationNode) => {\n      const h = Math.abs(testNode.row - destinationNode.row) * straightCost + Math.abs(testNode.column - destinationNode.column) * straightCost\n      return h\n    } // 2. Euclidean\n\n\n    const euclidean = (testNode, destinationNode) => {\n      let vx = destinationNode.column - testNode.column\n      let vy = destinationNode.row - testNode.row\n      let h = Math.floor(Math.sqrt(vx * vx + vy * vy) * straightCost)\n      return h\n    } // 3. Diagonal\n\n\n    const diagonal = (testNode, destinationNode) => {\n      let vx = Math.abs(destinationNode.column - testNode.column)\n      let vy = Math.abs(destinationNode.row - testNode.row)\n      let h = 0\n\n      if (vx > vy) {\n        h = Math.floor(diagonalCost * vy + straightCost * (vx - vy))\n      } else {\n        h = Math.floor(diagonalCost * vx + straightCost * (vy - vx))\n      }\n\n      return h\n    } // Loop through all the nodes until the current `centerNode` matches the\n    // `destinationNode`. When they they're the same we know we've reached the\n    // end of the path\n\n\n    while (centerNode !== destinationNode) {\n      // Find all the nodes surrounding the current `centerNode`\n      const surroundingTestNodes = surroundingNodes(centerNode.index, mapArray, mapWidthInTiles, useDiagonalNodes) // Loop through all the `surroundingTestNodes` using a classic `for` loop\n      // (A `for` loop gives us a marginal performance boost)\n\n      for (let i = 0; i < surroundingTestNodes.length; i++) {\n        // Get a reference to the current test node\n        const testNode = surroundingTestNodes[i] // Find out whether the node is on a straight axis or\n        // a diagonal axis, and assign the appropriate cost\n        // A. Declare the cost variable\n\n        let cost = 0 // B. Do they occupy the same row or column?\n\n        if (centerNode.row === testNode.row || centerNode.column === testNode.column) {\n          // If they do, assign a cost of \"10\"\n          cost = straightCost\n        } else {\n          // Otherwise, assign a cost of \"14\"\n          cost = diagonalCost\n        } // C. Calculate the costs (g, h and f)\n        // The node's current cost\n\n\n        const g = centerNode.g + cost // The cost of travelling from this node to the\n        // destination node (the heuristic)\n\n        let h\n\n        switch (heuristic) {\n        case 'manhattan':\n          h = manhattan(testNode, destinationNode)\n          break\n\n        case 'euclidean':\n          h = euclidean(testNode, destinationNode)\n          break\n\n        case 'diagonal':\n          h = diagonal(testNode, destinationNode)\n          break\n\n        default:\n          throw new Error('Oops! It looks like you misspelled the name of the heuristic')\n        } // The final cost\n\n\n        const f = g + h // Find out if the testNode is in either\n        // the openList or closedList array\n\n        const isOnOpenList = openList.some(node => testNode === node)\n        const isOnClosedList = closedList.some(node => testNode === node) // If it's on either of these lists, we can check\n        // whether this route is a lower-cost alternative\n        // to the previous cost calculation. The new G cost\n        // will make the difference to the final F cost\n\n        if (isOnOpenList || isOnClosedList) {\n          if (testNode.f > f) {\n            testNode.f = f\n            testNode.g = g\n            testNode.h = h // Only change the parent if the new cost is lower\n\n            testNode.parent = centerNode\n          }\n        } // Otherwise, add the testNode to the open list\n        else {\n          testNode.f = f\n          testNode.g = g\n          testNode.h = h\n          testNode.parent = centerNode\n          openList.push(testNode)\n        } // The `for` loop ends here\n\n      } // Push the current centerNode into the closed list\n\n\n      closedList.push(centerNode) // Quit the loop if there's nothing on the open list.\n      // This means that there is no path to the destination or the\n      // destination is invalid, like a wall tile\n\n      if (openList.length === 0) {\n        return theShortestPath\n      } // Sort the open list according to final cost\n\n\n      openList = openList.sort((a, b) => a.f - b.f) // Set the node with the lowest final cost as the new centerNode\n\n      centerNode = openList.shift() // The `while` loop ends here\n    } // Now that we have all the candidates, let's find the shortest path!\n\n\n    if (openList.length !== 0) {\n      // Start with the destination node\n      let testNode = destinationNode\n      theShortestPath.push(testNode) // Work backwards through the node parents\n      // until the start node is found\n\n      while (testNode !== startNode) {\n        // Step through the parents of each node,\n        // starting with the destination node and ending with the start node\n        testNode = testNode.parent // Add the node to the beginning of the array\n\n        theShortestPath.unshift(testNode) // ...and then loop again to the next node's parent till you\n        // reach the end of the path\n      }\n    } // Return an array of nodes that link together to form\n    // the shortest path\n\n\n    return theShortestPath\n  }\n  /*\n  ### tileBasedLineOfSight\n   Use the `tileBasedLineOfSight` function to find out whether two sprites\n  are visible to each other inside a tile based maze environment.\n   */\n\n\n  tileBasedLineOfSight(spriteOne, // The first sprite, with `centerX` and `centerY` properties\n    spriteTwo, // The second sprite, with `centerX` and `centerY` properties\n    mapArray, // The tile map array\n    world, // The `world` object that contains the `tilewidth\n    //`tileheight` and `widthInTiles` properties\n    emptyGid = 0, // The Gid that represents and empty tile, usually `0`\n    segment = 32, // The distance between collision points\n    angles = [] // An array of angles to which you want to\n  // restrict the line of sight\n  ) {\n    // Plot a vector between spriteTwo and spriteOne\n    let vx = spriteTwo.centerX - spriteOne.centerX\n    let vy = spriteTwo.centerY - spriteOne.centerY // Find the vector's magnitude (its length in pixels)\n\n    const magnitude = Math.sqrt(vx * vx + vy * vy) // How many points will we need to test?\n\n    const numberOfPoints = magnitude / segment // Create an array of x/y points that\n    // extends from `spriteOne` to `spriteTwo`\n\n    const points = () => {\n      // Initialize an array that is going to store all our points\n      // along the vector\n      const arrayOfPoints = [] // Create a point object for each segment of the vector and\n      // store its x/y position as well as its index number on\n      // the map array\n\n      for (let i = 1; i <= numberOfPoints; i++) {\n        // Calculate the new magnitude for this iteration of the loop\n        const newMagnitude = segment * i // Find the unit vector\n\n        let dx = vx / magnitude\n        let dy = vy / magnitude // Use the unit vector and newMagnitude to figure out the x/y\n        // position of the next point in this loop iteration\n\n        let x = spriteOne.centerX + dx * newMagnitude\n        let y = spriteOne.centerY + dy * newMagnitude // Find the map index number that this x and y point corresponds to\n\n        const index = this.getIndex(x, y, world.tilewidth, world.tileheight, world.widthInTiles) // Push the point into the `arrayOfPoints`\n\n        arrayOfPoints.push({\n          x,\n          y,\n          index\n        })\n      } // Return the array\n\n\n      return arrayOfPoints\n    } // The tile-based collision test.\n    // The `noObstacles` function will return `true` if all the tile\n    // index numbers along the vector are `0`, which means they contain\n    // no walls. If any of them aren't 0, then the function returns\n    // `false` which means there's a wall in the way\n\n\n    const noObstacles = points().every(point => mapArray[point.index] === emptyGid) // Restrict the line of sight to right angles only (we don't want to\n    // use diagonals)\n\n    const validAngle = () => {\n      // Find the angle of the vector between the two sprites\n      const angle = Math.atan2(vy, vx) * 180 / Math.PI // If the angle matches one of the valid angles, return\n      // `true`, otherwise return `false`\n\n      if (angles.length !== 0) {\n        return angles.some(x => x === angle)\n      }\n\n      return true\n    } // Return `true` if there are no obstacles and the line of sight\n    // is at a 90 degree angle\n\n\n    if (noObstacles === true && validAngle() === true) {\n      return true\n    }\n\n    return false\n  }\n  /*\n  surroundingCrossCells\n  ---------------------\n   Returns an array of index numbers matching the cells that are orthogonally\n  adjacent to the center `index` cell\n   */\n\n\n  surroundingCrossCells(index, widthInTiles) {\n    return [index - widthInTiles, index - 1, index + 1, index + widthInTiles]\n  }\n  /*\n  surroundingDiagonalCells\n  ---------------------\n   Returns an array of index numbers matching the cells that touch the\n  4 corners of the center the center `index` cell\n   */\n\n\n  surroundingDiagonalCells(index, widthInTiles) {\n    return [index - widthInTiles - 1, index - widthInTiles + 1, index + widthInTiles - 1, index + widthInTiles + 1]\n  }\n  /*\n  validDirections\n  ---------------\n   Returns an array with the values \"up\", \"down\", \"left\" or \"right\"\n  that represent all the valid directions in which a sprite can move\n  The `validGid` is the grid index number for the \"walkable\" part of the world\n  (such as, possibly, `0`.)\n  */\n\n\n  validDirections(sprite, mapArray, validGid, world) {\n    // Get the sprite's current map index position number\n    const index = this.getIndex(sprite.x, sprite.y, world.tilewidth, world.tileheight, world.widthInTiles) // An array containing the index numbers of tile cells\n    // above, below and to the left and right of the sprite\n\n    const surroundingCrossCells = (index, widthInTiles) => [index - widthInTiles, index - 1, index + 1, index + widthInTiles] // Get the index position numbers of the 4 cells to the top, right, left\n    // and bottom of the sprite\n\n\n    const surroundingIndexNumbers = surroundingCrossCells(index, world.widthInTiles) // Find all the tile gid numbers that match the surrounding index numbers\n\n    const surroundingTileGids = surroundingIndexNumbers.map(index => mapArray[index]) // `directionList` is an array of 4 string values that can be either\n    // \"up\", \"left\", \"right\", \"down\" or \"none\", depending on\n    // whether there is a cell with a valid gid that matches that direction.\n\n    const directionList = surroundingTileGids.map((gid, i) => {\n      // The possible directions\n      const possibleDirections = ['up', 'left', 'right', 'down'] // If the direction is valid, choose the matching string\n      // identifier for that direction. Otherwise, return \"none\"\n\n      if (gid === validGid) {\n        return possibleDirections[i]\n      }\n\n      return 'none'\n    }) // We don't need \"none\" in the list of directions\n    // (it's just a placeholder), so let's filter it out\n\n    const filteredDirectionList = directionList.filter(direction => direction !== 'none') // Return the filtered list of valid directions\n\n    return filteredDirectionList\n  }\n  /*\n  canChangeDirection\n  ------------------\n   Returns `true` or `false` depending on whether a sprite in at a map\n  array location in which it able to change its direction\n  */\n\n\n  canChangeDirection(validDirections = []) {\n    // Is the sprite in a dead-end (cul de sac.) This will be true if there's only\n    // one element in the `validDirections` array\n    const inCulDeSac = validDirections.length === 1 // Is the sprite trapped? This will be true if there are no elements in\n    // the `validDirections` array\n\n    const trapped = validDirections.length === 0 // Is the sprite in a passage? This will be `true` if the the sprite\n    // is at a location that contain the values\n    // “left” or “right” and “up” or “down”\n\n    let up = validDirections.find(x => x === 'up')\n    let down = validDirections.find(x => x === 'down')\n    let left = validDirections.find(x => x === 'left')\n    let right = validDirections.find(x => x === 'right')\n    let atIntersection = (up || down) && (left || right) // Return `true` if the sprite can change direction or\n    // `false` if it can't\n\n    return trapped || atIntersection || inCulDeSac\n  }\n  /*\n  randomDirection\n  ---------------\n   Randomly returns the values \"up\", \"down\", \"left\" or \"right\" based on\n  valid directions supplied. If the are no valid directions, it returns \"trapped\"\n   */\n\n\n  randomDirection(sprite, validDirections = []) {\n    // The `randomInt` helper function returns a random integer between a minimum\n    // and maximum value\n    const randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min // Is the sprite trapped?\n\n\n    const trapped = validDirections.length === 0 // If the sprite isn't trapped, randomly choose one of the valid\n    // directions. Otherwise, return the string \"trapped\"\n\n    if (!trapped) {\n      return validDirections[randomInt(0, validDirections.length - 1)]\n    }\n\n    return 'trapped'\n  }\n  /*\n  closestDirection\n  ----------------\n   Tells you the closes direction to `spriteTwo` from `spriteOne` based on\n  supplied validDirections. The function returns any of these\n  4 values: \"up\", \"down\", \"left\" or \"right\"\n   */\n\n\n  closestDirection(spriteOne, spriteTwo) {\n    // A helper function to find the closest direction\n    // Plot a vector between spriteTwo and spriteOne\n    let vx = spriteTwo.centerX - spriteOne.centerX\n    let vy = spriteTwo.centerY - spriteOne.centerY // If the distance is greater on the X axis...\n\n    if (Math.abs(vx) >= Math.abs(vy)) {\n      // Try left and right\n      if (vx <= 0) {\n        return 'left'\n      }\n\n      return 'right'\n    } // If the distance is greater on the Y axis...\n    // Try up and down\n\n\n    if (vy <= 0) {\n      return 'up'\n    }\n\n    return 'down'\n  }\n\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\"use strict\";\n\nimport FullscreenApplication from \"./app\";\nimport World from \"./world\";\nimport TextureExtractor from \"./extract\";\nimport utils from \"./utils\";\n\nexport { FullscreenApplication, World, TextureExtractor, utils };\n\n/* global window */\nwindow.PIXI.Tiled = { FullscreenApplication, World, TextureExtractor, utils };\n"],"sourceRoot":""}